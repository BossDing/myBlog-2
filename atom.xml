<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>认真搞定一切</title>
  
  <subtitle>会思考的天蝎座</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="blog.cuteximi.com/"/>
  <updated>2018-10-12T09:09:31.009Z</updated>
  <id>blog.cuteximi.com/</id>
  
  <author>
    <name>cuteximi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优秀的资源推荐</title>
    <link href="blog.cuteximi.com/%E4%BC%98%E7%A7%80%E7%9A%84%E8%B5%84%E6%BA%90%E6%8E%A8%E8%8D%90/"/>
    <id>blog.cuteximi.com/优秀的资源推荐/</id>
    <published>2018-10-06T13:01:19.000Z</published>
    <updated>2018-10-12T09:09:31.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>该篇文章整理自网络，网友一起贡献的优秀的学习网站和资源，谢谢大家。师傅领进门，修行在个人，一起来和优秀的人一起学习进步吧，这些优质的博主和资源是经过时间历练的，当然陶哥也不能藏着掖着啊，好内容当然也要和大家一起分享了。</p></blockquote><h2 id="分类介绍1"><a href="#分类介绍1" class="headerlink" title="分类介绍1"></a>分类介绍1</h2><p>主要介绍如下几个方面：</p><ul><li>优秀的博主。</li><li>优秀的社区。</li><li>专注某个知识领域的文章。</li></ul><p>其实有没有分那么细致，毕竟优秀的人不仅仅在某方面厉害。</p><ul><li><p>1.阮一峰的网络日志：<a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/</a></p></li><li><p>2.海牛部落：<a href="http://www.hainiubl.com/" target="_blank" rel="noopener">http://www.hainiubl.com/</a>  高品质的技术社区</p></li><li><p>3.熔岩： <a href="http://blog.51cto.com/lavasoft" target="_blank" rel="noopener">http://blog.51cto.com/lavasoft</a> Java生态技术</p></li><li><p>4.老赵点滴： <a href="http://blog.zhaojie.me/" target="_blank" rel="noopener">http://blog.zhaojie.me/</a>  打造国内最好的.net技术博客</p></li><li><p>5.陈皓 ： <a href="https://www.coolshell.cn/" target="_blank" rel="noopener">https://www.coolshell.cn/</a>  享受编程和技术带来的快乐</p></li><li><p>6.赖永浩 ： <a href="http://laiyonghao.com/" target="_blank" rel="noopener">http://laiyonghao.com/</a></p></li><li><p>7.July : <a href="https://blog.csdn.net/v_july_v" target="_blank" rel="noopener">https://blog.csdn.net/v_july_v</a> 结构之法、算法之道</p></li><li><p>8.刘未鹏：<a href="http://mindhacks.cn/" target="_blank" rel="noopener">http://mindhacks.cn/</a> 不解释</p></li><li><p>9.徐宥： <a href="https://blog.youxu.info/" target="_blank" rel="noopener">https://blog.youxu.info/</a> 人工智能博士，科普</p></li><li><p>10.李博杰：<a href="https://ring0.me/" target="_blank" rel="noopener">https://ring0.me/</a> 科普系列</p></li></ul><h4 id="公司团队"><a href="#公司团队" class="headerlink" title="公司团队"></a>公司团队</h4><ul><li><p>11.今日头条技术博客： <a href="https://techblog.toutiao.com/" target="_blank" rel="noopener">https://techblog.toutiao.com/</a> 纯技术大佬</p></li><li><p>12.美团技术团队：<a href="https://tech.meituan.com/" target="_blank" rel="noopener">https://tech.meituan.com/</a> 一行代码，亿万生活。非常接地气的文章。</p></li><li><p>13.阿里巴巴UED资深设计部门：<a href="http://www.aliued.com/" target="_blank" rel="noopener">http://www.aliued.com/</a> 前端的福利</p></li><li><p>14.Alloy Team : <a href="http://www.alloyteam.com/" target="_blank" rel="noopener">http://www.alloyteam.com/</a> 腾讯核心技术团队、致力于Web前端技术。</p></li><li><p>15.Tencent ISUX : <a href="https://isux.tencent.com/" target="_blank" rel="noopener">https://isux.tencent.com/</a> 腾讯核心设计团队，负责互联网产品的设计。</p></li></ul><h4 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h4><ul><li>16.V2EX : <a href="https://www.v2ex.com/" target="_blank" rel="noopener">https://www.v2ex.com/</a> 技术论坛</li></ul><p>以上仅为个人觉得值得看的博客和社区等，本文会持续更新，先收藏起来吧。如您有什么好的资源，欢迎评论。<br>查看外链可以选择点击阅读原文。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;该篇文章整理自网络，网友一起贡献的优秀的学习网站和资源，谢谢大家。师傅领进门，修行在个人，一起来和优秀的人一起学习
      
    
    </summary>
    
      <category term="编程" scheme="blog.cuteximi.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="推荐" scheme="blog.cuteximi.com/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>mac指南</title>
    <link href="blog.cuteximi.com/mac%E6%8C%87%E5%8D%97/"/>
    <id>blog.cuteximi.com/mac指南/</id>
    <published>2018-09-24T02:44:54.000Z</published>
    <updated>2018-09-24T02:45:31.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-开发配置手册"><a href="#Mac-开发配置手册" class="headerlink" title="Mac 开发配置手册"></a>Mac 开发配置手册</h1><p>手册内容为「<strong>如何让一部全新的 MacBook 快速完成开发环境配置</strong>」，主要面向 Web 开发者。其中的指导，在 Mavericks 和 Yosemite 上有效，其他版本系统并未尝试。</p><ul><li>如果你是一名老手，本手册让你减少配置开发环境的烦恼。</li><li>如果你是一名新手，那么恭喜你，你将会认识一个全新的世界。</li></ul><p>手册内容主要意译自：<a href="https://github.com/sb2nov/mac-setup" target="_blank" rel="noopener">Sourabh Bajaj</a> 的 Mac OS X Setup Guide，少部分内容由译者添加和修改。</p><p><img src="https://upload-images.jianshu.io/upload_images/5317394-e63a0dc3f41d7f04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>##系统设置</p><p>在任何的操作系统中，首先你需要做一件事就是更新系统，点击窗口左上角的  &gt; 关于本机 &gt; 软件更新 。此外，如果这是一部新的电脑，你还需要到系统设置进行一些适当调整。如何调整，取决于个人喜好。</p><h3 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h3><p>系统设置 &gt; 触控板<br>光标与点击<br>✓ 轻拍来点按<br>✓ 辅助点按<br>✓ 查找<br>✓ 三指拖移<br>滚动缩放<br>✓ 默认全选<br>更多手势<br>✓ 默认全选</p><h3 id="Dock"><a href="#Dock" class="headerlink" title="Dock"></a>Dock</h3><p>置于屏幕上的位置：左边<br>设置 Dock 图标更小（大小随个人喜好）<br>✓ 自动显示和隐藏 Dock</p><h3 id="Finder"><a href="#Finder" class="headerlink" title="Finder"></a>Finder</h3><p>Finder &gt; 显示<br>显示标签页栏<br>显示路径栏<br>显示状态栏<br>自定工具栏 &gt; 去除所有按钮，仅剩搜索栏<br>Finder &gt; 偏好设置<br>通用<br>开启新 Finder 窗口时打开：HOME「用户名」目录<br>边栏<br>添加 HOME「用户名」目录 和 创建代码文件目录<br>将 共享的(shared) 和 标记(tags) 目录去掉</p><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>去掉蓝牙等无需经常使用的图标<br>将电池显示设置为百分比</p><h3 id="Spotlight"><a href="#Spotlight" class="headerlink" title="Spotlight"></a>Spotlight</h3><p>去掉字体和书签与历史记录等不需要的内容<br>设置合适的快捷键</p><h3 id="互联网帐户"><a href="#互联网帐户" class="headerlink" title="互联网帐户"></a>互联网帐户</h3><p>添加 iCloud 用户，同步日历，联系人和 Find my mac 等等</p><h1 id="XCode"><a href="#XCode" class="headerlink" title="XCode"></a>XCode</h1><p>从 App store 或苹果开发者网站安装 <a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">Xcode</a> 。</p><p>紧接着，安装 Xcode command line tools，运行：</p><pre><code>xcode-select --install</code></pre><p>运行命令后，按照指引，你将完成 Xcode command line tools 安装。</p><hr><figcaption><p>如果你不是一名 iOS 或 OS X 开发者，可以跳过安装 XCode 的过程，直接安装 Xcode command line tools 。安装完成后，你将可以直接在 terminal 中使用主要的命令，比如：<code>make, GCC, clang, perl, svn, git, size, strip, strings, libtool, cpp</code>等等。</p></figcaption><pre class="line-numbers language-译注</code>:</p>"><code class="language-译注</code>:</p>"><p>如果你想了解 Xcode command line tools 包含多少可用的命令，可以到 <code>/Library/Developer/CommandLineTools/</code> 查看。以下为其中的命令列表：</p><ul><li>ar</li><li>as</li><li>asa</li><li>bison</li><li>BuildStrings</li><li>c++</li><li>c89</li><li>c99</li><li>cc</li><li>clang</li><li>clang++</li><li>cmpdylib</li><li>codesign_allocate</li><li>CpMac</li><li>cpp</li><li>ctags</li><li>ctf_insert</li><li>DeRez</li><li>dsymutil</li><li>dwarfdump</li><li>dyldinfo</li><li>flex</li><li>flex++</li><li>g++</li><li>gatherheaderdoc</li><li>gcc</li><li>gcov</li><li>GetFileInfo</li><li>git</li><li>git-cvsserver</li><li>git-receive-pack</li><li>git-shell</li><li>git-upload-archive</li><li>git-upload-pack</li><li>gm4</li><li>gnumake</li><li>gperf</li><li>hdxml2manxml</li><li>headerdoc2html</li><li>indent</li><li>install_name_tool</li><li>ld</li><li>lex</li><li>libtool</li><li>lipo</li><li>lldb</li><li>lorder</li><li>m4</li><li>make</li><li>MergePef</li><li>mig</li><li>mkdep</li><li>MvMac</li><li>nasm</li><li>ndisasm</li><li>nm</li><li>nmedit</li><li>otool</li><li>pagestuff</li><li>projectInfo</li><li>ranlib</li><li>rebase</li><li>redo_prebinding</li><li>ResMerger</li><li>resolveLinks</li><li>Rez</li><li>RezDet</li><li>RezWack</li><li>rpcgen</li><li>segedit</li><li>SetFile</li><li>size</li><li>SplitForks</li><li>strings</li><li>strip</li><li>svn</li><li>svnadmin</li><li>svndumpfilter</li><li>svnlook</li><li>svnrdump</li><li>svnserve</li><li>svnsync</li><li>svnversion</li><li>unifdef</li><li>unifdefall</li><li>UnRezWack</li><li>unwinddump</li><li>what</li><li>xml2man</li><li>yacc<h1 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h1></li></ul><p>包管理工具可以让你安装和更新程序变得更方便，目前在 OS X 系统中最受欢迎的包管理工具是 <a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a>.</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在安装 Homebrew 之前，需要将 <strong>Xcode Command Line Tools</strong> 安装完成，这样你就可以使用基于 Xcode Command Line Tools 编译的 Homebrew。</p><p>在 terminal 中复制以下命令（不包括 <code>$</code>），跟随指引，将完成 Hombrew 安装。</p><pre><code>$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>紧接着，我们需要做一件事让通过 Homebrew 安装的程序的启动链接 (在 <code>/usr/local/bin</code>中）可以直接运行，无需将完整路径写出。通过以下命令将 <code>/usr/local/bin</code> 添加至 <code>$PATH</code> 环境变量中:</p><pre><code>$ echo &#39; export PATH=&quot;/usr/local/bin:$PATH&quot; &#39; &gt;&gt; ~/.bash_profile</code></pre><p><strong>Cmd+T</strong> 打开一个新的 terminal 标签页，运行以下命令，确保 brew 运行正常。</p><pre><code>$ brew doctor</code></pre><hr><p><code>译注：</code></p><p>安装完成后，Homebrew 会将本地 <code>/usr/local</code> 初始化为 git 的工作树，并将目录所有者变更为当前所操作的用户，将来 <code>brew</code> 的相关操作不需要 sudo 。</p><p>Homebrew 基本使用<br>安装一个包，可以简单的运行：<br>$ brew install &lt;package_name&gt;<br>更新 Homebrew 在服务器端上的包目录：<br>$ brew update<br>查看你的包是否需要更新：<br>$ brew outdated<br>更新包：</p><p>$ brew upgrade &lt;package_name&gt;<br>Homebrew 将会把老版本的包缓存下来，以便当你想回滚至旧版本时使用。但这是比较少使用的情况，当你想清理旧版本的包缓存时，可以运行：<br>$ brew cleanup<br>查看你安装过的包列表（包括版本号）：<br>$ brew list –versions</p><h1 id="Homebrew-Cask"><a href="#Homebrew-Cask" class="headerlink" title="Homebrew Cask"></a>Homebrew Cask</h1><p>你已经感受到了使用 Homebrew 安装命令行程序的便利。那么接下来，我们将通过 Homebrew Cask 优雅、简单、快速的安装和管理 OS X 图形界面程序，比如 Google Chrome 和 Dropbox。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>安装 Homebrew-cask 是如此的简单直接，运行以下命令即可完成：</p><pre><code>$ brew install caskroom/cask/brew-cask$ brew cask install google-chrome // 安装 Google 浏览器$ brew update &amp;&amp; brew upgrade brew-cask &amp;&amp; brew cleanup // 更新</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>如果你想查看 cask 上是否存在你需要的 app，可以到 <a href="http://caskroom.io/" target="_blank" rel="noopener">caskroom.io</a> 进行搜索。</p><h3 id="文件预览插件"><a href="#文件预览插件" class="headerlink" title="文件预览插件"></a>文件预览插件</h3><p>有些 <a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="noopener">插件</a> 可以让 Mac 上的文件预览更有效，比如语法高亮、markdown 渲染、json 预览等等。</p><pre><code>$ brew cask install qlcolorcode$ brew cask install qlstephen$ brew cask install qlmarkdown$ brew cask install quicklook-json$ brew cask install qlprettypatch$ brew cask install quicklook-csv$ brew cask install betterzipql$ brew cask install webpquicklook$ brew cask install suspicious-package</code></pre><h3 id="OS-X-图形界面程序"><a href="#OS-X-图形界面程序" class="headerlink" title="OS X 图形界面程序"></a>OS X 图形界面程序</h3><pre><code>$ brew cask install alfred$ brew cask install appcleaner$ brew cask install cheatsheet$ brew cask install dropbox$ brew cask install google-chrome$ brew cask install onepassword$ brew cask install sublime-text$ brew cask install totalfinder...</code></pre><hr><p><code>译注：</code> 译者本人并不喜欢 brew cask 的安装方式，更倾向于到 App Store 或官方下载 OS X 图形界面程序。主要因为名字不好记忆、偶尔需要手动更新，另外当你使用 Alfred 或 Spotlight ，你将发现将程序安装在 ~/Application 会很方便。</p><h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><p>作为一名开发者，我们常常花上很多时间在终端 上，如同武士的剑，一出手便知高低。所以让我们安装 Mac 上最强大的终端 <a href="http://www.iterm2.com/" target="_blank" rel="noopener">iTerm2</a> 吧！写码除虫，居家必备。</p><p>在 <strong>Finder</strong> 中，将 <strong>iTerm</strong> 拖拽进入 Application 文件夹中。然后，你可以在 <strong>Launchpad</strong> 中启动 iTerm。</p><h3 id="颜色和字体设置"><a href="#颜色和字体设置" class="headerlink" title="颜色和字体设置"></a>颜色和字体设置</h3><ul><li>在 Keys -&gt; Hotkey 中设置 <code>command + option + i</code> 快速显示和隐藏 iTerm</li><li>在 Profiles -&gt; Default -&gt; Check silence bell</li><li>下载 <a href="https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized" target="_blank" rel="noopener">Solarized dark iterm colors</a>，在 Profiles -&gt; Default -&gt; Colors -&gt; Load Presets 将其导入，作为默认颜色。</li><li>在 Profiles -&gt; Text 改变游标（cursor）文字和颜色，随个人喜好。</li><li>更多设置，可参考 <a href="http://imwuyu.me/talk-about/cool-iterm2.html/" target="_blank" rel="noopener">打造好用的终端</a></li></ul><p><a href="http://orangehat.u.qiniudn.com/iterm2-theme.png" target="_blank" rel="noopener"><img src="http://upload-images.jianshu.io/upload_images/5317394-d134e344756ca8e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Screen"></a></p><p>Zsh<br>我们将安装 zsh ，其拓展功能和主题将由 oh-my-zsh 提供。其中Env.sh 文件用于维护别名（aliases），输出（exports）和路径改变（path changes）等等，以免影响 ~/.zshrc。<br>Zsh<br>使用 Homebrew 完成 zsh 和 zsh completions 的安装<br>    brew install zsh zsh-completions<br>安装 oh-my-zsh 让 zsh 获得拓展功能和主题<br>    curl -L <a href="https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh</a> | sh<br>用文本编辑器或 vi 打开 .zshrc 进行以下编辑:<br>    ZSH_THEME=pygmalion<br>    alias zshconfig=”vi ~/.zshrc”<br>    alias envconfig=”vi ~/Projects/config/env.sh”<br>    plugins=(git colored-man colorize github jira vagrant virtualenv pip python brew osx zsh-syntax-highlighting)<br>用文本编辑器或 vi 打开 ~/Projects/config/env.sh 进行以下编辑:</p><pre><code>#!/bin/zsh# PATHexport PATH=&quot;/usr/local/share/python:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin&quot;export EDITOR=&#39;vi -w&#39;# export PYTHONPATH=$PYTHONPATH# export MANPATH=&quot;/usr/local/man:$MANPATH&quot;# Virtual Environmentexport WORKON_HOME=$HOME/.virtualenvsexport PROJECT_HOME=$HOME/Projectssource /usr/local/bin/virtualenvwrapper.sh# Ownerexport USER_NAME=&quot;YOUR NAME&quot;eval &quot;$(rbenv init -)&quot;# FileSearchfunction f() { find . -iname &quot;*$1*&quot; ${@:2} }function r() { grep &quot;$1&quot; ${@:2} -R . }#mkdir and cdfunction mkcd() { mkdir -p &quot;$@&quot; &amp;&amp; cd &quot;$_&quot;; }# Aliasesalias cppcompile=&#39;c++ -std=c++11 -stdlib=libc++&#39;</code></pre><p>译注：</p><p>如果是新增环境变量或者是修改环境变量的值，都需要 source 一下才能立即生效。<br>如果是删除一个环境变量，必须输入 exit 以 logout 当前 shell ，然后再重新打开一个新的 shell 并 login 才能生效。</p><h1 id="Git-and-Github"><a href="#Git-and-Github" class="headerlink" title="Git and Github"></a>Git and Github</h1><p>作为一名开发者怎么可能没有 <a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a> 呢? 我们马上就来安装：</p><pre><code>$ brew install git</code></pre><p>好的，现在我们来测试一下 <code>git</code> 是否安装完好：</p><pre><code>$ git --version</code></pre><p>运行 <code>$ which git</code> 将会输出 <code>/usr/local/bin/git</code>.</p><p>接着，我们将定义你的 Git 帐号（与你在 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 使用的用户名和邮箱一致）</p><pre><code>$ git config --global user.name &quot;Your Name Here&quot;$ git config --global user.email &quot;your_email@youremail.com&quot;</code></pre><p>这些配置信息将会添加进 <code>~/.gitconfig</code> 文件中.</p><p>我们将推荐使用 HTTPS 方法（另一个是 SSH），将你的代码推送到 Github 上的仓库。如果你不想每次都输入用户名和密码的话，可以按照此 <a href="https://help.github.com/articles/set-up-git" target="_blank" rel="noopener">描述</a> 说的那样，运行：</p><pre><code>$ git config --global credential.helper osxkeychain</code></pre><p>此外，如果你打算使用 SSH方式，可以参考此 <a href="https://help.github.com/articles/generating-ssh-keys" target="_blank" rel="noopener">链接</a>.</p><p>Git Ignore<br>创建一个新文件 ~/.gitignore ，并将以下内容添加进去，这样全部 git 仓库将会忽略以下内容所提及的文件。</p><pre><code># Folder view configuration files.DS_StoreDesktop.ini# Thumbnail cache files._*Thumbs.db# Files that might appear on external disks.Spotlight-V100.Trashes# Compiled Python files*.pyc# Compiled C++ files*.out# Application specific filesvenvnode_modules.sass-cache</code></pre><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>我们将使用 Homebrew 安装 <a href="http://www.mysql.com/" target="_blank" rel="noopener">MySQL</a>，同时也会安装 MySQL 的相关文件。</p><p>安装 MySQL:</p><pre><code>$ brew update # 这是一个好习惯$ brew install mysql</code></pre><p>在使用 MySQL 前，我们需要做一些设置：</p><pre><code>$ unset TMPDIR$ mkdir /usr/local/var$ mysql_install_db --verbose --user=`whoami` --basedir=&quot;$(brew --prefix mysql)&quot; --datadir=/usr/local/var/mysql --tmpdir=/tmp</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动 MySQL 服务，运行 <code>mysql.server</code></p><pre><code>$ mysql.server start</code></pre><p>关闭 MySQL，运行：</p><pre><code>$ mysql.server stop</code></pre><p>你可以了解更多 <code>mysql.server</code> 的命令，运行：</p><pre><code>$ mysql.server --help</code></pre><p>登录 MySQL, 运行:</p><pre><code>$ mysql -uroot</code></pre><p><strong>Note</strong>: 默认情况下，MySQL 用户 <code>root</code> 没有密码，这对本地开发没有关系，但如果你希望修改密码，你可以运行:</p><pre><code>$ mysqladmin -u root password &#39;new-password&#39;</code></pre><hr><p><code>译注：</code></pre><p>当你在设置密码时出现问题，可以参考 <a href="https://ruby-china.org/topics/1901" target="_blank" rel="noopener">lgn21st</a> 的方式。</p><p>此外，如果你觉得敲那么多命令是一件很麻烦的事情，那么你也可以参考 <a href="http://elf8848.iteye.com/blog/1914209" target="_blank" rel="noopener">Mac OS安装 MySQL（使用二进制PGK包安装）</a></p><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p>使用 Homebrew 安装 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>:</p><pre><code>$ brew update$ brew install node</code></pre><p>一般 Node modules 通常被安装在每个项目的本地文件夹 <code>node_modules</code>， 但有几个包推荐你安装在全局：</p><p><a href="http://coffeescript.org/" target="_blank" rel="noopener">CoffeeScript</a>、 <a href="http://lesscss.org/" target="_blank" rel="noopener">Less</a>、 <a href="http://gruntjs.com/" target="_blank" rel="noopener">Grunt</a> 或 <a href="http://gulpjs.com/" target="_blank" rel="noopener">Gulp</a></p><pre><code>$ npm install -g coffee-script$ npm install -g less$ npm install -g grunt-cli$ npm install -g gulp</code></pre><h3 id="Npm-使用"><a href="#Npm-使用" class="headerlink" title="Npm 使用"></a>Npm 使用</h3><p>安装包:</p><pre><code>$ npm install &lt;package&gt;     # 安装在本地项目中$ npm install -g &lt;package&gt;  # 安装在全局</code></pre><p>安装包，并且将其保存你项目中的 <code>package.json</code> 文件:</p><pre><code>$ npm install &lt;package&gt; --save</code></pre><p>查看 npm 安装的内容:</p><pre><code>$ npm list     # 本地$ npm list -g  # 全局</code></pre><p>查看过期的包（本地或全局）:</p><pre><code>$ npm outdated [-g]</code></pre><p>更新全部或特别指定一个包:</p><pre><code>$ npm update [&lt;package&gt;]</code></pre><p>卸载包:</p><pre><code>$ npm uninstall &lt;package&gt;</code></pre><h1 id="Apps"><a href="#Apps" class="headerlink" title="Apps"></a>Apps</h1><p>这里推荐的 apps 在开发者圈子内普遍评价不错，能便利的处理日常的开发和使用的任务。以下推荐分为四类：</p><ul><li>开发者工具</li><li>生产力工具</li><li>办公工具</li><li>其他</li></ul><h3 id="Developer-Tools"><a href="#Developer-Tools" class="headerlink" title="Developer Tools"></a>Developer Tools</h3><ul><li><a href="https://www.google.com/intl/en/chrome/browser/" target="_blank" rel="noopener">Google Chrome</a></li><li><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">Webstorm</a></li><li><a href="http://bohemiancoding.com/sketch/" target="_blank" rel="noopener">Sketch</a></li><li><a href="http://kapeli.com/dash" target="_blank" rel="noopener">Dash</a></li><li><a href="http://www.sequelpro.com/" target="_blank" rel="noopener">Sequel Pro</a></li><li><a href="https://www.parallels.com/hk/" target="_blank" rel="noopener">Parallels</a></li><li><a href="https://mac.github.com/" target="_blank" rel="noopener">Github</a></li></ul><h3 id="Productivity"><a href="#Productivity" class="headerlink" title="Productivity"></a>Productivity</h3><ul><li><p><a href="https://agilebits.com/onepassword" target="_blank" rel="noopener">1Password</a> : 跨平台的密码管理工具</p></li><li><p><a href="http://www.alfredapp.com/" target="_blank" rel="noopener">Alfred 2</a> : 搜索工具，强烈建议更新至 power pack，可以参考 <a href="http://www.zhihu.com/question/20656680" target="_blank" rel="noopener">借助 Alfred 2 的 Workflows 功能可以做哪些好玩的事情？</a></p></li><li><p><a href="http://www.freemacsoft.net/appcleaner/" target="_blank" rel="noopener">AppCleaner</a>: 应用程序卸载工具</p></li><li><p><a href="https://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a>: 文件同步工具</p></li><li><p><a href="http://reederapp.com/" target="_blank" rel="noopener">Reeder</a>：RSS 阅读工具</p></li><li><p><a href="https://getpocket.com/" target="_blank" rel="noopener">Pocket</a> : 稍后阅读工具</p></li><li><p><a href="http://spectacleapp.com/" target="_blank" rel="noopener">Spectacle</a> : 让窗口成比例的显示，在写代码调试的时候很方便</p></li><li><p><a href="http://wakaba.c3.cx/s/apps/unarchiver.html" target="_blank" rel="noopener">Unarchiver</a>: 支持多种格式（包括 windows下的格式）的压缩/解压缩工具</p></li><li><p><a href="https://www.omnigroup.com/omnifocus" target="_blank" rel="noopener">OminiFocus</a> ：时间管理工具</p></li><li><p><a href="http://25.io/mou/" target="_blank" rel="noopener">Mou</a>：Markdown 编辑器，国人出品</p></li><li><p>[Sip] 取色器</p></li><li><p>[MindeNode] 思维导图</p></li><li><p>[xScope] 测量工具</p></li><li><p>[Lantern] 科学上网</p></li><li><p>[OhMyStar] Github star 管理</p></li></ul><h3 id="Office-Apps"><a href="#Office-Apps" class="headerlink" title="Office Apps"></a>Office Apps</h3><ul><li><a href="http://www.apple.com/mac/keynote/" target="_blank" rel="noopener">Keynote</a></li><li><a href="http://www.apple.com/mac/numbers/" target="_blank" rel="noopener">Numbers</a></li><li><a href="http://www.apple.com/mac/pages/" target="_blank" rel="noopener">Pages</a></li><li><a href="http://www.microsoft.com/mac/buy" target="_blank" rel="noopener">Microsoft Office</a></li></ul><h3 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h3><ul><li><a href="http://www.grandtotal.biz/CheatSheet/" target="_blank" rel="noopener">CheatSheet</a> : 长按 <code>command</code> ，将能查看当前程序的快捷键</li><li><a href="https://tapbots.com/software/tweetbot/mac/" target="_blank" rel="noopener">Tweetbot</a>: 最好的 twitter 客户端，优雅，精致</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-开发配置手册&quot;&gt;&lt;a href=&quot;#Mac-开发配置手册&quot; class=&quot;headerlink&quot; title=&quot;Mac 开发配置手册&quot;&gt;&lt;/a&gt;Mac 开发配置手册&lt;/h1&gt;&lt;p&gt;手册内容为「&lt;strong&gt;如何让一部全新的 MacBook 快速完成开发环
      
    
    </summary>
    
      <category term="编程" scheme="blog.cuteximi.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="mac" scheme="blog.cuteximi.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>pip-bug解决方案</title>
    <link href="blog.cuteximi.com/pip-bug%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>blog.cuteximi.com/pip-bug解决方案/</id>
    <published>2018-09-19T06:37:11.000Z</published>
    <updated>2018-09-19T06:40:21.295Z</updated>
    
    <content type="html"><![CDATA[<p>使用pip3 出现以下错误：</p><figcaption>(most recent call last):</figcaption><pre class="line-numbers language-Traceback"><code class="language-Traceback">File “/usr/bin/pip3”, line 9, infrom pip import main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者pip升级时也出现这个问题<br>这是pip 10.0.0版本的BUG</p><p><strong>解决办法</strong></p><p>修改 /usr/bin/pip 文件</p><pre class="line-numbers language-text"><code class="language-text">from pip import mainif __name__ == '__main__':    sys.exit(main())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>改为：</p><pre class="line-numbers language-text"><code class="language-text">from pip import __main__if __name__ == '__main__':    sys.exit(__main__._main())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/5317394-8459959eaa590f27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信公众号：码省理工"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用pip3 出现以下错误：&lt;/p&gt;
&lt;figcaption&gt;(most recent call last):&lt;/figcaption&gt;&lt;pre class=&quot;line-numbers language-Traceback&quot;&gt;&lt;code class=&quot;language-Tr
      
    
    </summary>
    
    
      <category term="pip" scheme="blog.cuteximi.com/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot采坑|启动项目检测不到Controller</title>
    <link href="blog.cuteximi.com/SpringBoot%E9%87%87%E5%9D%91-%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%88%B0Controller/"/>
    <id>blog.cuteximi.com/SpringBoot采坑-启动项目检测不到Controller/</id>
    <published>2018-09-19T06:34:27.000Z</published>
    <updated>2018-09-19T06:40:18.087Z</updated>
    
    <content type="html"><![CDATA[<pre><code>问题描述：springboot项目访问不到controller方法。</code></pre><p>【分析】<br>应该是springboot并没有扫描到controller。<br>【查看日志】<br>记录此时的日志输出</p><pre><code>/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/bin/java -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=51893 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true &quot;-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=51894:/Applications/IntelliJ IDEA.app/Contents/bin&quot; -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/tools.jar:/Users/taoshilei/Documents/springbootdemo/target/classes:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/2.0.4.RELEASE/spring-boot-starter-jdbc-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter/2.0.4.RELEASE/spring-boot-starter-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot/2.0.4.RELEASE/spring-boot-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-logging/2.0.4.RELEASE/spring-boot-starter-logging-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar:/Users/taoshilei/.m2/repository/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar:/Users/taoshilei/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.10.0/log4j-to-slf4j-2.10.0.jar:/Users/taoshilei/.m2/repository/org/apache/logging/log4j/log4j-api/2.10.0/log4j-api-2.10.0.jar:/Users/taoshilei/.m2/repository/org/slf4j/jul-to-slf4j/1.7.25/jul-to-slf4j-1.7.25.jar:/Users/taoshilei/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar:/Users/taoshilei/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar:/Users/taoshilei/.m2/repository/com/zaxxer/HikariCP/2.7.9/HikariCP-2.7.9.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-jdbc/5.0.8.RELEASE/spring-jdbc-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-beans/5.0.8.RELEASE/spring-beans-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-tx/5.0.8.RELEASE/spring-tx-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-web/2.0.4.RELEASE/spring-boot-starter-web-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-json/2.0.4.RELEASE/spring-boot-starter-json-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.9.6/jackson-datatype-jdk8-2.9.6.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.9.6/jackson-datatype-jsr310-2.9.6.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/2.0.4.RELEASE/spring-boot-starter-tomcat-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.32/tomcat-embed-core-8.5.32.jar:/Users/taoshilei/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/8.5.32/tomcat-embed-el-8.5.32.jar:/Users/taoshilei/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.32/tomcat-embed-websocket-8.5.32.jar:/Users/taoshilei/.m2/repository/org/hibernate/validator/hibernate-validator/6.0.11.Final/hibernate-validator-6.0.11.Final.jar:/Users/taoshilei/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar:/Users/taoshilei/.m2/repository/org/jboss/logging/jboss-logging/3.3.2.Final/jboss-logging-3.3.2.Final.jar:/Users/taoshilei/.m2/repository/com/fasterxml/classmate/1.3.4/classmate-1.3.4.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-web/5.0.8.RELEASE/spring-web-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-webmvc/5.0.8.RELEASE/spring-webmvc-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-aop/5.0.8.RELEASE/spring-aop-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-context/5.0.8.RELEASE/spring-context-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-expression/5.0.8.RELEASE/spring-expression-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/mybatis/spring/boot/mybatis-spring-boot-starter/1.3.1/mybatis-spring-boot-starter-1.3.1.jar:/Users/taoshilei/.m2/repository/org/mybatis/spring/boot/mybatis-spring-boot-autoconfigure/1.3.1/mybatis-spring-boot-autoconfigure-1.3.1.jar:/Users/taoshilei/.m2/repository/org/mybatis/mybatis/3.4.5/mybatis-3.4.5.jar:/Users/taoshilei/.m2/repository/org/mybatis/mybatis-spring/1.3.1/mybatis-spring-1.3.1.jar:/Users/taoshilei/.m2/repository/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-core/5.0.8.RELEASE/spring-core-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-jcl/5.0.8.RELEASE/spring-jcl-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.9.6/jackson-module-parameter-names-2.9.6.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.6/jackson-core-2.9.6.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.6/jackson-databind-2.9.6.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/Users/taoshilei/.m2/repository/com/github/pagehelper/pagehelper-spring-boot-starter/1.2.5/pagehelper-spring-boot-starter-1.2.5.jar:/Users/taoshilei/.m2/repository/com/github/pagehelper/pagehelper-spring-boot-autoconfigure/1.2.5/pagehelper-spring-boot-autoconfigure-1.2.5.jar:/Users/taoshilei/.m2/repository/com/github/pagehelper/pagehelper/5.1.4/pagehelper-5.1.4.jar:/Users/taoshilei/.m2/repository/com/github/jsqlparser/jsqlparser/1.0/jsqlparser-1.0.jar:/Users/taoshilei/.m2/repository/com/alibaba/druid-spring-boot-starter/1.1.9/druid-spring-boot-starter-1.1.9.jar:/Users/taoshilei/.m2/repository/com/alibaba/druid/1.1.9/druid-1.1.9.jar:/Users/taoshilei/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.0.4.RELEASE/spring-boot-autoconfigure-2.0.4.RELEASE.jar com.cuteximi.springbootdemo.SpringbootdemoApplication  .   ____          _            __ _ _ /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  &#39;  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.0.4.RELEASE)2018-08-26 17:14:42.416  INFO 2196 --- [           main] c.c.s.SpringbootdemoApplication          : Starting SpringbootdemoApplication on ximi.local with PID 2196 (/Users/taoshilei/Documents/springbootdemo/target/classes started by taoshilei in /Users/taoshilei/Documents/springbootdemo)2018-08-26 17:14:42.419  INFO 2196 --- [           main] c.c.s.SpringbootdemoApplication          : No active profile set, falling back to default profiles: default2018-08-26 17:14:42.481  INFO 2196 --- [           main] ConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4f6ee6e4: startup date [Sun Aug 26 17:14:42 CST 2018]; root of context hierarchy2018-08-26 17:14:43.641  INFO 2196 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)2018-08-26 17:14:43.659  INFO 2196 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]2018-08-26 17:14:43.659  INFO 2196 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.322018-08-26 17:14:43.662  INFO 2196 --- [ost-startStop-1] o.a.catalina.core.AprLifecycleListener   : The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/Users/taoshilei/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.]2018-08-26 17:14:43.717  INFO 2196 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext2018-08-26 17:14:43.717  INFO 2196 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1239 ms2018-08-26 17:14:43.779  INFO 2196 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Servlet dispatcherServlet mapped to [/]2018-08-26 17:14:43.780  INFO 2196 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Servlet statViewServlet mapped to [/druid/*]2018-08-26 17:14:43.782  INFO 2196 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;characterEncodingFilter&#39; to: [/*]2018-08-26 17:14:43.782  INFO 2196 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;hiddenHttpMethodFilter&#39; to: [/*]2018-08-26 17:14:43.782  INFO 2196 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;httpPutFormContentFilter&#39; to: [/*]2018-08-26 17:14:43.783  INFO 2196 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;requestContextFilter&#39; to: [/*]2018-08-26 17:14:43.783  INFO 2196 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;webStatFilter&#39; to urls: [/*]2018-08-26 17:14:43.823  INFO 2196 --- [           main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource2018-08-26 17:14:44.149  INFO 2196 --- [           main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited2018-08-26 17:14:44.354  INFO 2196 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2018-08-26 17:14:44.474  INFO 2196 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4f6ee6e4: startup date [Sun Aug 26 17:14:42 CST 2018]; root of context hierarchy2018-08-26 17:14:44.511  INFO 2196 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/error]}&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.error(javax.servlet.http.HttpServletRequest)2018-08-26 17:14:44.512  INFO 2196 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/error],produces=[text/html]}&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)2018-08-26 17:14:44.529  INFO 2196 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2018-08-26 17:14:44.529  INFO 2196 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2018-08-26 17:14:44.744  INFO 2196 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup2018-08-26 17:14:44.745  INFO 2196 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name &#39;statFilter&#39; has been autodetected for JMX exposure2018-08-26 17:14:44.746  INFO 2196 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name &#39;dataSource&#39; has been autodetected for JMX exposure2018-08-26 17:14:44.749  INFO 2196 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Located MBean &#39;dataSource&#39;: registering with JMX server as MBean [com.alibaba.druid.spring.boot.autoconfigure:name=dataSource,type=DruidDataSourceWrapper]2018-08-26 17:14:44.750  INFO 2196 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Located MBean &#39;statFilter&#39;: registering with JMX server as MBean [com.alibaba.druid.filter.stat:name=statFilter,type=StatFilter]2018-08-26 17:14:44.789  INFO 2196 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;2018-08-26 17:14:44.793  INFO 2196 --- [           main] c.c.s.SpringbootdemoApplication          : Started SpringbootdemoApplication in 2.774 seconds (JVM running for 3.516)2018-08-26 17:15:29.784  INFO 2196 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet &#39;dispatcherServlet&#39;2018-08-26 17:15:29.784  INFO 2196 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &#39;dispatcherServlet&#39;: initialization started2018-08-26 17:15:29.798  INFO 2196 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &#39;dispatcherServlet&#39;: initialization completed in 14 ms2018-08-26 17:17:08.584  INFO 2196 --- [       Thread-8] ConfigServletWebServerApplicationContext : Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@4f6ee6e4: startup date [Sun Aug 26 17:14:42 CST 2018]; root of context hierarchy2018-08-26 17:17:08.599  INFO 2196 --- [       Thread-8] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown2018-08-26 17:17:08.600  INFO 2196 --- [       Thread-8] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans2018-08-26 17:17:08.615  INFO 2196 --- [       Thread-8] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closedProcess finished with exit code 130 (interrupted by signal 2: SIGINT)</code></pre><p>【解决方案】<br>试着使用网提供的思路，将启动类放到与controller文件夹同级。<br><img src="https://upload-images.jianshu.io/upload_images/5317394-839f596aac07f180.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>【再次查看日志】</p><pre><code>/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/bin/java -XX:TieredStopAtLevel=1 -noverify -Dspring.output.ansi.enabled=always -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=52845 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=127.0.0.1 -Dspring.liveBeansView.mbeanDomain -Dspring.application.admin.enabled=true &quot;-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52846:/Applications/IntelliJ IDEA.app/Contents/bin&quot; -Dfile.encoding=UTF-8 -classpath /Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/charsets.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/deploy.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/cldrdata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/dnsns.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/jaccess.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/jfxrt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/localedata.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/nashorn.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/sunec.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/sunjce_provider.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/sunpkcs11.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/ext/zipfs.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/javaws.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/jce.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/jfr.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/jfxswt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/jsse.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/management-agent.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/plugin.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/resources.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/jre/lib/rt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/ant-javafx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/dt.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/javafx-mx.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/jconsole.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/packager.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/sa-jdi.jar:/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home/lib/tools.jar:/Users/taoshilei/Documents/springbootdemo/target/classes:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-jdbc/2.0.4.RELEASE/spring-boot-starter-jdbc-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter/2.0.4.RELEASE/spring-boot-starter-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot/2.0.4.RELEASE/spring-boot-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-logging/2.0.4.RELEASE/spring-boot-starter-logging-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar:/Users/taoshilei/.m2/repository/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar:/Users/taoshilei/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.10.0/log4j-to-slf4j-2.10.0.jar:/Users/taoshilei/.m2/repository/org/apache/logging/log4j/log4j-api/2.10.0/log4j-api-2.10.0.jar:/Users/taoshilei/.m2/repository/org/slf4j/jul-to-slf4j/1.7.25/jul-to-slf4j-1.7.25.jar:/Users/taoshilei/.m2/repository/javax/annotation/javax.annotation-api/1.3.2/javax.annotation-api-1.3.2.jar:/Users/taoshilei/.m2/repository/org/yaml/snakeyaml/1.19/snakeyaml-1.19.jar:/Users/taoshilei/.m2/repository/com/zaxxer/HikariCP/2.7.9/HikariCP-2.7.9.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-jdbc/5.0.8.RELEASE/spring-jdbc-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-beans/5.0.8.RELEASE/spring-beans-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-tx/5.0.8.RELEASE/spring-tx-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-web/2.0.4.RELEASE/spring-boot-starter-web-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-json/2.0.4.RELEASE/spring-boot-starter-json-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.9.6/jackson-datatype-jdk8-2.9.6.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.9.6/jackson-datatype-jsr310-2.9.6.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-starter-tomcat/2.0.4.RELEASE/spring-boot-starter-tomcat-2.0.4.RELEASE.jar:/Users/taoshilei/.m2/repository/org/apache/tomcat/embed/tomcat-embed-core/8.5.32/tomcat-embed-core-8.5.32.jar:/Users/taoshilei/.m2/repository/org/apache/tomcat/embed/tomcat-embed-el/8.5.32/tomcat-embed-el-8.5.32.jar:/Users/taoshilei/.m2/repository/org/apache/tomcat/embed/tomcat-embed-websocket/8.5.32/tomcat-embed-websocket-8.5.32.jar:/Users/taoshilei/.m2/repository/org/hibernate/validator/hibernate-validator/6.0.11.Final/hibernate-validator-6.0.11.Final.jar:/Users/taoshilei/.m2/repository/javax/validation/validation-api/2.0.1.Final/validation-api-2.0.1.Final.jar:/Users/taoshilei/.m2/repository/org/jboss/logging/jboss-logging/3.3.2.Final/jboss-logging-3.3.2.Final.jar:/Users/taoshilei/.m2/repository/com/fasterxml/classmate/1.3.4/classmate-1.3.4.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-web/5.0.8.RELEASE/spring-web-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-webmvc/5.0.8.RELEASE/spring-webmvc-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-aop/5.0.8.RELEASE/spring-aop-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-context/5.0.8.RELEASE/spring-context-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-expression/5.0.8.RELEASE/spring-expression-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/mybatis/spring/boot/mybatis-spring-boot-starter/1.3.1/mybatis-spring-boot-starter-1.3.1.jar:/Users/taoshilei/.m2/repository/org/mybatis/spring/boot/mybatis-spring-boot-autoconfigure/1.3.1/mybatis-spring-boot-autoconfigure-1.3.1.jar:/Users/taoshilei/.m2/repository/org/mybatis/mybatis/3.4.5/mybatis-3.4.5.jar:/Users/taoshilei/.m2/repository/org/mybatis/mybatis-spring/1.3.1/mybatis-spring-1.3.1.jar:/Users/taoshilei/.m2/repository/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-core/5.0.8.RELEASE/spring-core-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/springframework/spring-jcl/5.0.8.RELEASE/spring-jcl-5.0.8.RELEASE.jar:/Users/taoshilei/.m2/repository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.9.6/jackson-module-parameter-names-2.9.6.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.9.6/jackson-core-2.9.6.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.9.6/jackson-databind-2.9.6.jar:/Users/taoshilei/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar:/Users/taoshilei/.m2/repository/com/github/pagehelper/pagehelper-spring-boot-starter/1.2.5/pagehelper-spring-boot-starter-1.2.5.jar:/Users/taoshilei/.m2/repository/com/github/pagehelper/pagehelper-spring-boot-autoconfigure/1.2.5/pagehelper-spring-boot-autoconfigure-1.2.5.jar:/Users/taoshilei/.m2/repository/com/github/pagehelper/pagehelper/5.1.4/pagehelper-5.1.4.jar:/Users/taoshilei/.m2/repository/com/github/jsqlparser/jsqlparser/1.0/jsqlparser-1.0.jar:/Users/taoshilei/.m2/repository/com/alibaba/druid-spring-boot-starter/1.1.9/druid-spring-boot-starter-1.1.9.jar:/Users/taoshilei/.m2/repository/com/alibaba/druid/1.1.9/druid-1.1.9.jar:/Users/taoshilei/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/Users/taoshilei/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/2.0.4.RELEASE/spring-boot-autoconfigure-2.0.4.RELEASE.jar com.cuteximi.springbootdemo.SpringbootdemoApplication  .   ____          _            __ _ _ /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  &#39;  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.0.4.RELEASE)2018-08-26 17:50:40.248  INFO 2506 --- [           main] c.c.s.SpringbootdemoApplication          : Starting SpringbootdemoApplication on ximi.local with PID 2506 (/Users/taoshilei/Documents/springbootdemo/target/classes started by taoshilei in /Users/taoshilei/Documents/springbootdemo)2018-08-26 17:50:40.251  INFO 2506 --- [           main] c.c.s.SpringbootdemoApplication          : No active profile set, falling back to default profiles: default2018-08-26 17:50:40.347  INFO 2506 --- [           main] ConfigServletWebServerApplicationContext : Refreshing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@359f7cdf: startup date [Sun Aug 26 17:50:40 CST 2018]; root of context hierarchy2018-08-26 17:50:41.652  INFO 2506 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)2018-08-26 17:50:41.674  INFO 2506 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]2018-08-26 17:50:41.674  INFO 2506 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.322018-08-26 17:50:41.677  INFO 2506 --- [ost-startStop-1] o.a.catalina.core.AprLifecycleListener   : The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/Users/taoshilei/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:.]2018-08-26 17:50:41.739  INFO 2506 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext2018-08-26 17:50:41.739  INFO 2506 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1395 ms2018-08-26 17:50:41.814  INFO 2506 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Servlet dispatcherServlet mapped to [/]2018-08-26 17:50:41.815  INFO 2506 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Servlet statViewServlet mapped to [/druid/*]2018-08-26 17:50:41.817  INFO 2506 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;characterEncodingFilter&#39; to: [/*]2018-08-26 17:50:41.818  INFO 2506 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;hiddenHttpMethodFilter&#39; to: [/*]2018-08-26 17:50:41.818  INFO 2506 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;httpPutFormContentFilter&#39; to: [/*]2018-08-26 17:50:41.818  INFO 2506 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;requestContextFilter&#39; to: [/*]2018-08-26 17:50:41.818  INFO 2506 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &#39;webStatFilter&#39; to urls: [/*]2018-08-26 17:50:41.862  INFO 2506 --- [           main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource2018-08-26 17:50:42.174  INFO 2506 --- [           main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited2018-08-26 17:50:42.372  INFO 2506 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2018-08-26 17:50:42.493  INFO 2506 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@359f7cdf: startup date [Sun Aug 26 17:50:40 CST 2018]; root of context hierarchy2018-08-26 17:50:42.524  INFO 2506 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/list],methods=[GET]}&quot; onto public java.util.List&lt;com.cuteximi.springbootdemo.domain.User&gt; com.cuteximi.springbootdemo.controller.StudentController.test1()2018-08-26 17:50:42.528  INFO 2506 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/error]}&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.error(javax.servlet.http.HttpServletRequest)2018-08-26 17:50:42.528  INFO 2506 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/error],produces=[text/html]}&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.servlet.error.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)2018-08-26 17:50:42.545  INFO 2506 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2018-08-26 17:50:42.545  INFO 2506 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2018-08-26 17:50:42.717  INFO 2506 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup2018-08-26 17:50:42.718  INFO 2506 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name &#39;statFilter&#39; has been autodetected for JMX exposure2018-08-26 17:50:42.718  INFO 2506 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Bean with name &#39;dataSource&#39; has been autodetected for JMX exposure2018-08-26 17:50:42.722  INFO 2506 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Located MBean &#39;dataSource&#39;: registering with JMX server as MBean [com.alibaba.druid.spring.boot.autoconfigure:name=dataSource,type=DruidDataSourceWrapper]2018-08-26 17:50:42.723  INFO 2506 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Located MBean &#39;statFilter&#39;: registering with JMX server as MBean [com.alibaba.druid.filter.stat:name=statFilter,type=StatFilter]2018-08-26 17:50:42.762  INFO 2506 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;2018-08-26 17:50:42.768  INFO 2506 --- [           main] c.c.s.SpringbootdemoApplication          : Started SpringbootdemoApplication in 2.914 seconds (JVM running for 3.529)</code></pre><p>对比两次日志，多了这一条：</p><pre><code>2018-08-26 17:50:42.524  INFO 2506 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;{[/list],methods=[GET]}&quot; onto public java.util.List&lt;com.cuteximi.springbootdemo.domain.User&gt; com.cuteximi.springbootdemo.controller.StudentController.test1()</code></pre><p>实验结果：<br><img src="https://upload-images.jianshu.io/upload_images/5317394-9854c70cb67fb591.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/5317394-8459959eaa590f27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信公众号：码省理工"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;问题描述：springboot项目访问不到controller方法。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;【分析】&lt;br&gt;应该是springboot并没有扫描到controller。&lt;br&gt;【查看日志】&lt;br&gt;记录此时的日志输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/
      
    
    </summary>
    
    
      <category term="Spring Boot" scheme="blog.cuteximi.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>致自己-关键总结</title>
    <link href="blog.cuteximi.com/%E8%87%B4%E8%87%AA%E5%B7%B1-%E5%85%B3%E9%94%AE%E6%80%BB%E7%BB%93/"/>
    <id>blog.cuteximi.com/致自己-关键总结/</id>
    <published>2018-09-19T06:30:09.000Z</published>
    <updated>2018-09-19T06:40:19.705Z</updated>
    
    <content type="html"><![CDATA[<p>Google was late to search.<br>Facebook was late to social networking.<br>Apple was late to the MP3 Player.</p><p><code>It`s never to late.Just do it better.</code></p><p>任何时候做任何决定都不是最晚的时候，而是你要斟酌自己自身的实力，不要去企图把小概率事件扣到自己的头上。</p><p>借用stormzhang（帅张）一段话：</p><blockquote><p>人的一生有很多重要的决定，最大的可能是在做正确的决定其实决定了你未来的人生，是否考研，是否转行，要不要去投资个生意，爱上一个女孩要不要去追等等等，做这些所有的选择与决定之前，想想自身的优势，结合趋势和风口，看一下自己做这件事的把握有多少，单反但凡重大决定，不要想着在尝试中去找答案，对于小事情这样是可以的，但是对于一些重要决定是没有尝试的机会的，想尽一切办法想把仗打赢的，是最难的，你该做的，是在一开始选择前，这场仗能打赢，再去打。</p></blockquote><p>最后（还是引用stormzhang）一句话告诫自己：<br>永远不要以小概率事件来决策，永远不要把自己当成小概率事件的缔造者。</p><p><img src="https://upload-images.jianshu.io/upload_images/5317394-8459959eaa590f27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信公众号：码省理工"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Google was late to search.&lt;br&gt;Facebook was late to social networking.&lt;br&gt;Apple was late to the MP3 Player.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;It`s never to lat
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>致自己</title>
    <link href="blog.cuteximi.com/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    <id>blog.cuteximi.com/致自己/</id>
    <published>2018-09-19T06:30:03.000Z</published>
    <updated>2018-09-19T06:40:22.501Z</updated>
    
    <content type="html"><![CDATA[<p>Google was late to search.<br>Facebook was late to social networking.<br>Apple was late to the MP3 Player.</p><p><code>It`s never to late.Just do it better.</code></p><p>任何时候做任何决定都不是最晚的时候，而是你要斟酌自己自身的实力，不要去企图把小概率事件扣到自己的头上。</p><p>借用stormzhang（帅张）一段话：</p><blockquote><p>人的一生有很多重要的决定，最大的可能是在做正确的决定其实决定了你未来的人生，是否考研，是否转行，要不要去投资个生意，爱上一个女孩要不要去追等等等，做这些所有的选择与决定之前，想想自身的优势，结合趋势和风口，看一下自己做这件事的把握有多少，单反但凡重大决定，不要想着在尝试中去找答案，对于小事情这样是可以的，但是对于一些重要决定是没有尝试的机会的，想尽一切办法想把仗打赢的，是最难的，你该做的，是在一开始选择前，这场仗能打赢，再去打。</p></blockquote><p>最后（还是引用stormzhang）一句话告诫自己：<br>永远不要以小概率事件来决策，永远不要把自己当成小概率事件的缔造者。</p><p><img src="https://upload-images.jianshu.io/upload_images/5317394-8459959eaa590f27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信公众号：码省理工"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Google was late to search.&lt;br&gt;Facebook was late to social networking.&lt;br&gt;Apple was late to the MP3 Player.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;It`s never to lat
      
    
    </summary>
    
      <category term="致自己" scheme="blog.cuteximi.com/categories/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>jstat使用指南</title>
    <link href="blog.cuteximi.com/jstat%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>blog.cuteximi.com/jstat使用指南/</id>
    <published>2018-09-19T06:23:46.000Z</published>
    <updated>2018-09-19T06:27:49.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jstat命令使用"><a href="#jstat命令使用" class="headerlink" title="jstat命令使用"></a>jstat命令使用</h1><h3 id="1-说在前面"><a href="#1-说在前面" class="headerlink" title="1 说在前面"></a>1 说在前面</h3><blockquote><p>提示：可以通过jps查看虚拟机进程的id<br>例如：使用命令<code>jps -l</code><br>注意：本次演示使用的jdk版本是jdk8.</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5317394-eb8c3f5e799a8c6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HotSpot虚拟机进程"></p><h3 id="2-jstat简介"><a href="#2-jstat简介" class="headerlink" title="2 jstat简介"></a>2 jstat简介</h3><p>jstat命令可以监控Java堆状况，监控类装载、卸载数量等，监控JIT编译等。命令的格式如下：</p><figcaption>[-命令选项] [vmid] [间隔时间/毫秒] [查询次数]</code></p></figcaption><pre class="line-numbers language-jstat"><h3 id="3-演示各个参数"><a href="#3-演示各个参数" class="headerlink" title="3 演示各个参数"><code class="language-jstat"><h3 id="3-演示各个参数"><a href="#3-演示各个参数" class="headerlink" title="3 演示各个参数"></a>3 演示各个参数</h3><p>3.1 类加载统计</p><p>命令行输入：<code>jstat -class 70815</code></p><pre><code>Loaded  Bytes  Unloaded  Bytes     Time 3610  6339.0        0     0.0       4.01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>说明</code></p><ul><li>Loaded:加载class的数量</li><li>Bytes：所占用空间大小</li><li>Unloaded：未加载数量</li><li>Bytes:未加载占用空间</li><li>Time：时间</li></ul><p>3.2 编译统计</p><p>命令行输入：<code>jstat -compiler 70815</code></p><pre><code>Compiled Failed Invalid   Time   FailedType FailedMethod    1624      0       0     2.08          0</code></pre><p><code>说明</code></p><ul><li>Compiled：编译数量。</li><li>Failed：失败数量</li><li>Invalid：不可用数量</li><li>Time：时间</li><li>FailedType：失败类型</li><li>FailedMethod：失败的方法</li></ul><p>3.3 垃圾回收统计<br>命令行输入：<code>jstat -gc 70815</code><br>可右划查看结果。</p><pre><code>S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT5120.0 5120.0 5100.9  0.0   33280.0   2452.0   87552.0     4345.6   18560.0 18133.4 2432.0 2216.3      4    0.033   1      0.014    0.047</code></pre><p><code>说明</code></p><ul><li>S0C：第一个幸存区的大小</li><li>S1C：第二个幸存区的大小</li><li>S0U：第一个幸存区的使用大小</li><li>S1U：第二个幸存区的使用大小</li><li>EC：新生代的大小</li><li>EU：新生代的使用大小</li><li>OC：老年代大小</li><li>OU：老年代使用大小</li><li>MC：方法区大小</li><li>MU：方法区使用大小</li><li>CCSC:压缩类空间大小</li><li>CCSU:压缩类空间使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>YGCT：年轻代垃圾回收消耗时间</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><p>3.4 堆内存统计<br>输入命令：jstat -gcapacity 70815</p><pre><code> NGCMN    NGCMX     NGC     S0C   S1C       EC      OGCMN      OGCMX       OGC         OC       MCMN     MCMX      MC     CCSMN    CCSMX     CCSC    YGC    FGC 43520.0 262144.0  43520.0 5120.0 5120.0  33280.0    87552.0   524288.0    87552.0    87552.0      0.0 1064960.0  18560.0      0.0 1048576.0   2432.0      4     1</code></pre><p><code>说明</code></p><ul><li>NGCMN：新生代最小容量</li><li>NGCMX：新生代最大容量</li><li>NGC：当前新生代容量</li><li>S0C：第一个幸存区大小</li><li>S1C：第二个幸存区的大小</li><li>EC：Eden区的大小</li><li>OGCMN：老年代最小容量</li><li>OGCMX：老年代最大容量</li><li>OGC：当前老年代大小</li><li>OC: 当前老年代大小</li><li>MCMN: 最小元数据容量</li><li>MCMX：最大元数据容量</li><li>MC：当前元数据空间大小</li><li>CCSMN：最小压缩类空间大小</li><li>CCSMX：最大压缩类空间大小</li><li>CCSC：当前压缩类空间大小</li><li>YGC：年轻代gc次数</li><li>FGC：老年代GC次数</li></ul><p>3.5 新生代垃圾回收统计<br>输入命令：<code>jstat -gcnew 70815</code></p><pre><code> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT5120.0 5120.0 5100.9    0.0  7  15 5120.0  33280.0   3198.8      4    0.033</code></pre><p><code>说明</code></p><ul><li>S0C：第一个幸存区大小</li><li>S1C：第二个幸存区的大小</li><li>S0U：第一个幸存区的使用大小</li><li>S1U：第二个幸存区的使用大小</li><li>TT:对象在新生代存活的次数</li><li>MTT:对象在新生代存活的最大次数</li><li>DSS:期望的幸存区大小</li><li>EC：Eden区的大小</li><li>EU：Eden区的使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>YGCT：年轻代垃圾回收消耗时间</li></ul><p>3.6 新生代内存统计<br>输入命令：<code>jstat -gcnewcapacity 70815</code></p><pre><code>NGCMN      NGCMX       NGC      S0CMX     S0C     S1CMX     S1C       ECMX        EC      YGC   FGC   43520.0   262144.0    43520.0  87040.0   5120.0  87040.0   5120.0   261120.0    33280.0     4     1</code></pre><p><code>说明</code></p><ul><li>NGCMN：新生代最小容量</li><li>NGCMX：新生代最大容量</li><li>NGC：当前新生代容量</li><li>S0CMX：最大幸存1区大小</li><li>S0C：当前幸存1区大小</li><li>S1CMX：最大幸存2区大小</li><li>S1C：当前幸存2区大小</li><li>ECMX：最大Eden区大小</li><li>EC：当前Eden区大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代回收次数</li></ul><p>3.7 老年代垃圾回收统计<br>输入命令：  <code>jstat -gcold 70815</code></p><pre><code> MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT 18560.0  18133.4   2432.0   2216.3     87552.0      4345.6      4     1    0.014    0.047</code></pre><p><code>说明</code></p><ul><li>MC：方法区大小</li><li>MU：方法区使用大小</li><li>CCSC:压缩类空间大小</li><li>CCSU:压缩类空间使用大小</li><li>OC：老年代大小</li><li>OU：老年代使用大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><p>3.8 老年代内存统计<br>输入命令：<code>jstat -gcoldcapacity 70815</code></p><pre><code>OGCMN       OGCMX        OGC         OC       YGC   FGC    FGCT     GCT    87552.0    524288.0     87552.0     87552.0     4     1    0.014    0.047</code></pre><p><code>说明</code></p><ul><li>OGCMN：老年代最小容量</li><li>OGCMX：老年代最大容量</li><li>OGC：当前老年代大小</li><li>OC：老年代大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><p>3.9 元数据空间统计<br>输入命令：<code>jstat -gcmetacapacity 70815</code></p><pre><code> MCMN       MCMX        MC       CCSMN      CCSMX       CCSC     YGC   FGC    FGCT     GCT       0.0  1064960.0    18560.0        0.0  1048576.0     2432.0     4     1    0.014    0.047</code></pre><p><code>说明</code></p><ul><li>MCMN:最小元数据容量</li><li>MCMX：最大元数据容量</li><li>MC：当前元数据空间大小</li><li>CCSMN：最小压缩类空间大小</li><li>CCSMX：最大压缩类空间大小</li><li>CCSC：当前压缩类空间大小</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><h2 id="总结垃圾回收统计"><a href="#总结垃圾回收统计" class="headerlink" title="总结垃圾回收统计"></a>总结垃圾回收统计</h2><p>输入命令：<code>jstat -gcutil 70815</code></p><pre><code>S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT 99.63   0.00  11.95   4.96  97.70  91.13      4    0.033     1    0.014    0.047</code></pre><p><code>说明</code></p><ul><li>S0：幸存1区当前使用比例</li><li>S1：幸存2区当前使用比例</li><li>E：Eden区使用比例</li><li>O：老年代使用比例</li><li>M：元数据区使用比例</li><li>CCS：压缩使用比例</li><li>YGC：年轻代垃圾回收次数</li><li>FGC：老年代垃圾回收次数</li><li>FGCT：老年代垃圾回收消耗时间</li><li>GCT：垃圾回收消耗总时间</li></ul><p>3.10 JVM编译方法统计<br>输入命令：<code>jstat printcompliation 70815</code></p><pre><code>Compiled  Size  Type Method  1708      8    1   java/lang/reflect/WeakCache$LookupValue hashCode</code></pre><p><code>说明</code></p><ul><li>Compiled：最近编译方法的数量</li><li>Size：最近编译方法的字节码数量</li><li>Type：最近编译方法的编译类型。</li><li>Method：方法名标识。</li></ul><h3 id="说在最后"><a href="#说在最后" class="headerlink" title="说在最后"></a>说在最后</h3><p>Google was late to search.<br>Facebook was late to social networking.<br>Apple was late to the MP3 Player.<br><code>It`s never to late.Just do it better.</code></pre><p>任何时候做任何决定都不是最晚的时候，而是你要斟酌自己自身的实力，不要去企图把小概率事件扣到自己的头上。</p><p>借用stormzhang（帅张）一段话：</p><blockquote><p>人的一生有很多重要的决定，最大的可能是在做正确的决定其实决定了你未来的人生，是否考研，是否抓航，要不要去投资个生意，爱上一个女孩要不要去追等等等，做这些所有的选择与决定之前，想想自身的优势，结合趋势和风口，看一下自己做这件事的把握有多少，单反但凡重大决定，不要想着在尝试中去找答案，对于小事情这样是可以的，但是对于一些重要决定是没有尝试的机会的，想尽一切办法想把仗打赢的，是最难的，你该做的，是在一开始选择前，这场仗能打赢，再去打。</p></blockquote><p>最后（还是引用stormzhang）一句话告诫自己：<br>永远不要以小概率事件来决策，永远不要把自己当成小概率事件的缔造者。</p><p><img src="https://upload-images.jianshu.io/upload_images/5317394-8459959eaa590f27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信公众号：码省理工"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jstat命令使用&quot;&gt;&lt;a href=&quot;#jstat命令使用&quot; class=&quot;headerlink&quot; title=&quot;jstat命令使用&quot;&gt;&lt;/a&gt;jstat命令使用&lt;/h1&gt;&lt;h3 id=&quot;1-说在前面&quot;&gt;&lt;a href=&quot;#1-说在前面&quot; class=&quot;head
      
    
    </summary>
    
      <category term="JVM" scheme="blog.cuteximi.com/categories/JVM/"/>
    
    
      <category term="工具" scheme="blog.cuteximi.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>一个牛逼的coder</title>
    <link href="blog.cuteximi.com/%E4%B8%80%E4%B8%AA%E7%89%9B%E9%80%BC%E7%9A%84coder/"/>
    <id>blog.cuteximi.com/一个牛逼的coder/</id>
    <published>2018-09-18T12:08:47.000Z</published>
    <updated>2018-09-18T12:15:22.681Z</updated>
    
    <content type="html"><![CDATA[<p>大厂offer拿到手软，同样毕业，为什么别人可以拿到很多大厂的offer？大 厂更看重毕业生哪一点？</p><p>阅读文本大概需要 4 分钟。</p><p>今天我给大家分享一个帖子：</p><p>一个有实力的coder应该要知道的领域</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><img src="http://upload-images.jianshu.io/upload_images/5317394-59caa6fb81bd2c15?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>1.算法和数据结构</strong></p><p>数据，链表，二叉树，队列，栈的各种操作（性能，场景）</p><p>二分查找和各种变种的二分查找</p><p>各类排序算法以及时间复杂度分析</p><p>各类算法题（手写）</p><p>理解并可以分子时间和空间复杂度</p><p>动态规划</p><p>红黑树/AVL树，Hash树，Tire树，B树，B+树</p><p>图算法</p><p><strong>2.计算机网络</strong></p><p>OSI七层协议（TCP四层）</p><p>每一层的协议</p><p>URL到页面的过程</p><p>HTTPhttp/https 1.0 1.1 2.0</p><p>get/post以及幂等性</p><p>http协议头相关网络攻击（CSRF,XSS）</p><p>TCP/IP三次握手，四次挥手拥塞控制（过程/阈值）</p><p>流量控制与滑动窗口</p><p>TCP和UDP的比较子网划分（笔试）</p><p>DDOS攻击</p><p>IO/NIO/AIO三者原理，各个语言是怎么实现的；</p><p>Netty</p><p>Linux内核select  poll epoll</p><p><strong>3.数据库</strong></p><p>索引（分类以及优化方式，失效条件，底层结构）；</p><p>sql语法；</p><p>引擎对比；</p><p>数据库的锁（行锁，表锁，页级索，意向锁，读锁，写锁，悲观锁，乐观锁，以及枷锁的select sql方式）；</p><p>隔离界别，依次解决的问题（脏读，不可重复读，幻读）；</p><p>事物的ACID；</p><p>B树，B+树优化（explain,慢查询，show profile）；</p><p>数据库的范式分库分表，主从复制，读写分离；</p><p>Nosql相关（redis和mencached区别）；</p><p>redis相关；</p><p><strong>4.操作系统</strong></p><p>进程通信IPC（几种方式），与线程的区别；</p><p>OS的几种策略（页面置换，进程调度，每个里面算法）；</p><p>互斥与死锁相关的；</p><p>Linux常用命令；</p><p>Linux内核相关；</p><p><strong>5.编程语言(java)</strong></p><p>java基础、集合、并发；</p><p>多线程（线程池，SYNC和Lock锁机制，线程通信，volatile、ThreadLocal,Cyclibarrier,Atom包，CountDownLatch,AQS,CAS原理）；</p><p>JVM（内存模型，gc垃圾回收，包括分代，GC算法，收集器，类加载和双亲委派机制，内存泄漏和内存溢出）；</p><p>IO/NIO相关、反射和代理，异常；</p><p>java8相关的；</p><p>序列化、设计模式（常用的）；</p><p>web相关的（servlet, cookie/session, Spring(AOP,IOC,MVC事务，动态代理）；</p><p>mybatis.Tomcat,Hibernate等看源码；</p><p><strong>6.分布式架构</strong></p><p>（了解原理就行，如果真的有实践经验更好）</p><p>CAP原理和BASE理论。</p><p>Nosql与KV存储（redis，hbase，mongodb，memcached等）</p><p>服务化理论（包括服务发现、治理等，zookeeper、etcd、springcloud微服务、）</p><p>负载均衡（原理、cdn、一致性hash）</p><p>RPC框架（包括整体的一些框架理论，通信的netty，序列化协议thrift，protobuff等）                  </p><p>消息队列（原理、kafka，activeMQ，rocketMQ）</p><p>分布式存储系统（GFS、HDFS、fastDFS）、存储模型（skipList、LSM等）</p><p>分布式事务、分布式锁等</p><p><strong>7.脚本语言</strong></p><p>（只是作为横向扩充，一般问到linux也会问问shell脚本）</p><p>python ， php  ，shell  ，golang 。</p><p><strong>8.大数据与数据分析</strong></p><p>hadoop生态圈(hive、hbase、hdfs、zookeeper、storm、kafka)                   spark体系 ，语言：python、R、scala  搜索引擎与技术</p><p><strong>9.机器学习算法</strong>             </p><p>模型和算法很多。不细说了，如果很熟练就去投算法，国内很多公司都算法岗都很稀缺，其他岗可以大概了解下理论。                        </p><p><strong>10.其他工具的理论和使用</strong>               </p><p>这个更多了，问的多的比如git、docker、maven/gradle、Jenkins等等，自己需要的话选择性地去学。</p><p>说了这么多…推荐几本良心的书籍吧。</p><h2 id="推荐书单"><a href="#推荐书单" class="headerlink" title="推荐书单"></a>推荐书单</h2><p><img src="http://upload-images.jianshu.io/upload_images/5317394-59caa6fb81bd2c15?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>算法与数据结构：</p><p>数据结构（严蔚敏）/大话数据结构 </p><p>剑指Offer/程序员面试金典/编程珠玑/编程之美/牛客网+leetcode</p><p>程序员笔试面试最优解（左程云）</p><p>Java的版本（不是很推荐）： 数据结构与算法经典问题解析（Java语言描述）</p><p>图解数据结构（使用Java）</p><hr><p>计算机网络：</p><p>计算机网络（谢希仁）</p><p>TCP/IP 详解</p><p>HTTP权威指南</p><p>图解TCP/IP</p><p>图解HTTP</p><hr><p>数据库：</p><p>数据库主要是多用，书上主要看索引和性能的部分</p><p>高性能MySQL/深入浅出MySQL</p><hr><p>操作系统：</p><p>OS原理：操作系统（课本，黑色的那个）</p><hr><p>Linux：</p><p>Linux私房菜 //鸟哥写的，很全，包括bash部分</p><p>跟阿铭学Linux //主要偏重于命令和操作，比较浅显</p><hr><p>Java：</p><p>Java疯狂讲义/Java编程思想/Java核心技术 卷1</p><p>深入理解Java虚拟机</p><p>并发编程的艺术/多线程编程核心技术</p><p>Effective Java</p><p>Java程序员面试笔试宝典 //何昊的那本，个人感觉是突击知识点的神器       </p><p>Java程序性能优化</p><p>实战Java高并发程序设计</p><hr><p>Java Web：</p><p>Spring实战/轻量级JavaEE 企业应用（红皮，讲SSH的）</p><p>//主要看最后一部分Spring的就可以</p><p>深入JavaWeb技术内幕（阿里 许令波）//这个讲的还是比较深的        SpringBoot实战/深入实践SpringBoot</p><hr><p>设计模式：</p><p>大话设计模式 //通俗易懂</p><p>各类博客的总结</p><hr><p>分布式与大数据：</p><p>分布式服务框架原理与实践</p><p>大型网站技术架构</p><p>Hadoop实战（hadoop体系包括得很全）</p><hr><p>其他：</p><p>Git：</p><p>Git权威指南</p><p>Git官方讲解视频（牛客网有带字幕的）</p><p>Redis：            </p><p>Redis实战</p><p>是不是觉得有点多啊？当然，大佬都是一步一步积累的，加油吧！优秀的你，肯定有时间，有耐心，有毅力！</p><p>本文编辑：cuteximi</p><p>参考：网友分享 &amp; 整理</p><p>版式：cuteximi</p><ul><li><ul><li><ul><li>End - - - -</li></ul></li></ul></li></ul><p>如果觉得对你有帮助，请持续关注转发，谢谢各位。</p><p>cuteximi.com</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大厂offer拿到手软，同样毕业，为什么别人可以拿到很多大厂的offer？大 厂更看重毕业生哪一点？&lt;/p&gt;
&lt;p&gt;阅读文本大概需要 4 分钟。&lt;/p&gt;
&lt;p&gt;今天我给大家分享一个帖子：&lt;/p&gt;
&lt;p&gt;一个有实力的coder应该要知道的领域&lt;/p&gt;
&lt;h2 id=&quot;基础知识
      
    
    </summary>
    
      <category term="程序员" scheme="blog.cuteximi.com/categories/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
    
      <category term="程序员" scheme="blog.cuteximi.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
  </entry>
  
  <entry>
    <title>network-generator</title>
    <link href="blog.cuteximi.com/network-generator/"/>
    <id>blog.cuteximi.com/network-generator/</id>
    <published>2018-04-08T00:45:51.000Z</published>
    <updated>2018-04-08T00:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#一概述">一、概述</a><ul><li><a href="#网络的网络">网络的网络</a></li><li><a href="#isp">ISP</a></li><li><a href="#主机之间的通信方式">主机之间的通信方式</a></li><li><a href="#电路交换与分组交换">电路交换与分组交换</a></li><li><a href="#时延">时延</a></li><li><a href="#计算机网络体系结构">计算机网络体系结构*</a></li></ul></li><li><a href="#二物理层">二、物理层</a><ul><li><a href="#通信方式">通信方式</a></li><li><a href="#带通调制">带通调制</a></li><li><a href="#信道复用技术">信道复用技术</a></li></ul></li><li><a href="#三数据链路层">三、数据链路层</a><ul><li><a href="#信道分类">信道分类</a></li><li><a href="#三个基本问题">三个基本问题</a></li><li><a href="#局域网">局域网</a></li><li><a href="#ppp-协议">PPP 协议</a></li><li><a href="#csmacd-协议">CSMA/CD 协议*</a></li><li><a href="#扩展局域网">扩展局域网*</a></li><li><a href="#mac-层">MAC 层*</a></li></ul></li><li><a href="#四网络层">四、网络层*</a><ul><li><a href="#网际协议-ip-概述">网际协议 IP 概述</a></li><li><a href="#ip-数据报格式">IP 数据报格式</a></li><li><a href="#ip-地址编址方式">IP 地址编址方式</a></li><li><a href="#ip-地址和-mac-地址">IP 地址和 MAC 地址</a></li><li><a href="#地址解析协议-arp">地址解析协议 ARP</a></li><li><a href="#路由器的结构">路由器的结构</a></li><li><a href="#路由器分组转发流程">路由器分组转发流程</a></li><li><a href="#路由选择协议">路由选择协议</a></li><li><a href="#网际控制报文协议-icmp">网际控制报文协议 ICMP</a></li><li><a href="#分组网间探测-ping">分组网间探测 PING</a></li><li><a href="#虚拟专用网-vpn">虚拟专用网 VPN</a></li><li><a href="#网络地址转换-nat">网络地址转换 NAT</a></li></ul></li><li><a href="#五运输层">五、运输层*</a><ul><li><a href="#udp-和-tcp-的特点">UDP 和 TCP 的特点</a></li><li><a href="#udp-首部格式">UDP 首部格式</a></li><li><a href="#tcp-首部格式">TCP 首部格式</a></li><li><a href="#tcp-的三次握手">TCP 的三次握手</a></li><li><a href="#tcp-的四次挥手">TCP 的四次挥手</a></li><li><a href="#tcp-滑动窗口">TCP 滑动窗口</a></li><li><a href="#tcp-可靠传输">TCP 可靠传输</a></li><li><a href="#tcp-流量控制">TCP 流量控制</a></li><li><a href="#tcp-拥塞控制">TCP 拥塞控制</a></li></ul></li><li><a href="#六应用层">六、应用层*</a><ul><li><a href="#域名系统-dns">域名系统 DNS</a></li><li><a href="#文件传输协议-ftp">文件传输协议 FTP</a></li><li><a href="#远程终端协议-telnet">远程终端协议 TELNET</a></li><li><a href="#电子邮件协议">电子邮件协议</a></li><li><a href="#动态主机配置协议-dhcp">动态主机配置协议 DHCP</a></li><li><a href="#点对点传输-p2p">点对点传输 P2P</a></li><li><a href="#web-页面请求过程">Web 页面请求过程</a></li><li><a href="#常用端口">常用端口</a></li></ul></li><li><a href="#参考资料">参考资料</a><!-- GFM-TOC --></li></ul><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><h2 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a>网络的网络</h2><p>网络把主机连接起来，而互联网是把多种不同的网络连接起来，因此互联网是网络的网络。</p><p><div align="center"> <img src="../pics//network-of-networks.gif"> </div><br></p><h2 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h2><p>互联网服务提供商 ISP 可以从互联网管理机构获得许多 IP 地址，同时拥有通信线路以及路由器等联网设备，个人或机构向 ISP 缴纳一定的费用就可以接入互联网。</p><p><div align="center"> <img src="../pics//46cec213-3048-4a80-aded-fdd577542801.jpg"> </div><br></p><p>目前的互联网是一种多层次 ISP 结构，ISP 根据覆盖面积的大小分为主干 ISP、地区 ISP 和本地 ISP。</p><p>互联网交换点 IXP 允许两个 ISP 直接相连而不用经过第三个 ISP。</p><p><div align="center"> <img src="../pics//Technology-ComputerNetworking-Internet-ISPs.png"> </div><br></p><h2 id="主机之间的通信方式"><a href="#主机之间的通信方式" class="headerlink" title="主机之间的通信方式"></a>主机之间的通信方式</h2><ol><li><p>客户-服务器（C/S）：客户是服务的请求方，服务器是服务的提供方。</p></li><li><p>对等（P2P）：不区分客户和服务器。</p></li></ol><p><div align="center"> <img src="../pics//2ad244f5-939c-49fa-9385-69bc688677ab.jpg"> </div><br></p><h2 id="电路交换与分组交换"><a href="#电路交换与分组交换" class="headerlink" title="电路交换与分组交换"></a>电路交换与分组交换</h2><p><div align="center"> <img src="../pics//eebdeb57-8efb-4848-9bb6-97512990897c.jpg"> </div><br></p><p>（以上分别为：电路交换、报文交换以及分组交换）</p><h3 id="1-电路交换"><a href="#1-电路交换" class="headerlink" title="1. 电路交换"></a>1. 电路交换</h3><p>电路交换用于电话通信系统，两个用户要通信之前需要建立一条专用的物理链路，并且在整个通信过程中始终占用该链路。由于通信的过程中不可能一直在使用传输线路，因此电路交换对线路的利用率很低，往往不到 10%。</p><h3 id="2-报文交换"><a href="#2-报文交换" class="headerlink" title="2. 报文交换"></a>2. 报文交换</h3><p>报文交换用于邮局通信系统，邮局接收到一份报文之后，先存储下来，然后把相同目的地的报文一起转发到下一个目的地，这个过程就是存储转发过程。</p><h3 id="3-分组交换"><a href="#3-分组交换" class="headerlink" title="3. 分组交换"></a>3. 分组交换</h3><p>分组交换也使用了存储转发，但是转发的是分组而不是报文。把整块数据称为一个报文，由于一个报文可能很长，需要先进行切分，来满足分组能处理的大小。在每个切分的数据前面加上首部之后就成为了分组，首部包含了目的地址和源地址等控制信息。</p><p>存储转发允许在一条传输线路上传送多个主机的分组，也就是说两个用户之间的通信不需要占用端到端的线路资源。</p><p>相比于报文交换，由于分组比报文更小，因此分组交换的存储转发速度更加快速。</p><h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2><p>总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延</p><p><div align="center"> <img src="../pics//3939369b-3a4a-48a0-b9eb-3efae26dd400.png" width="800"> </div><br></p><h3 id="1-发送时延"><a href="#1-发送时延" class="headerlink" title="1. 发送时延"></a>1. 发送时延</h3><p>主机或路由器发送数据帧所需要的时间。</p><p><div align="center"><img src="https://latex.codecogs.com/gif.latex?delay=\frac{l(bit)}{v(bit/s)}"></div> <br></p><p>其中 l 表示数据帧的长度，v 表示发送速率。</p><h3 id="2-传播时延"><a href="#2-传播时延" class="headerlink" title="2. 传播时延"></a>2. 传播时延</h3><p>电磁波在信道中传播一定的距离需要花费的时间，电磁波传播速度接近光速。</p><p><div align="center"><img src="https://latex.codecogs.com/gif.latex?delay=\frac{l(m)}{v(m/s)}"></div> <br></p><p>其中 l 表示信道长度，v 表示电磁波在信道上的传播速率。</p><h3 id="3-处理时延"><a href="#3-处理时延" class="headerlink" title="3. 处理时延"></a>3. 处理时延</h3><p>主机或路由器收到分组时进行处理所需要的时间，例如分析首部、从分组中提取数据部、进行差错检验或查找适当的路由等。</p><h3 id="4-排队时延"><a href="#4-排队时延" class="headerlink" title="4. 排队时延"></a>4. 排队时延</h3><p>分组在路由器的输入队列和输出队列中排队等待的时间，取决于网络当前的通信量。</p><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构*"></a>计算机网络体系结构*</h2><p><div align="center"> <img src="../pics//426df589-6f97-4622-b74d-4a81fcb1da8e.png" width="800"> </div><br></p><h3 id="1-七层协议"><a href="#1-七层协议" class="headerlink" title="1. 七层协议"></a>1. 七层协议</h3><p>如图 a 所示，其中表示层和会话层用途如下：</p><ol><li>表示层：信息的语法、语义以及它们的关联，如加密解密、转换翻译、压缩解压缩；</li><li>会话层：不同机器上的用户之间建立及管理会话。</li></ol><h3 id="2-五层协议"><a href="#2-五层协议" class="headerlink" title="2. 五层协议"></a>2. 五层协议</h3><ol><li><p>应用层：为特定应用程序提供数据传输服务，例如 HTTP、DNS 等。数据单位为报文。</p></li><li><p>运输层：提供的是进程间的通用数据传输服务。由于应用层协议很多，定义通用的运输层协议就可以支持不断增多的应用层协议。运输层包括两种协议：传输控制协议 TCP，提供面向连接、可靠的数据传输服务，数据单位为报文段；用户数据报协议 UDP，提供无连接、尽最大努力的数据传输服务，数据单位为用户数据报。TCP 主要提供完整性服务，UDP 主要提供及时性服务。</p></li><li><p>网络层：为主机之间提供数据传输服务，而运输层协议是为主机中的进程提供服务。网络层把运输层传递下来的报文段或者用户数据报封装成分组。</p></li><li><p>数据链路层：网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的结点提供服务。数据链路层把网络层传来的分组封装成帧。</p></li><li><p>物理层：考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p></li></ol><h3 id="3-数据在各层之间的传递过程"><a href="#3-数据在各层之间的传递过程" class="headerlink" title="3. 数据在各层之间的传递过程"></a>3. 数据在各层之间的传递过程</h3><p>在向下的过程中，需要添加下层协议所需要的首部或者尾部，而在向上的过程中不断拆开首部和尾部。</p><p>路由器只有下面三层协议，因为路由器位于网络核心中，不需要为进程或者应用程序提供服务，因此也就不需要运输层和应用层。</p><p><div align="center"> <img src="../pics//ac106e7e-489a-4082-abd9-dabebe48394c.jpg" width="800"> </div><br></p><h3 id="4-TCP-IP-体系结构"><a href="#4-TCP-IP-体系结构" class="headerlink" title="4. TCP/IP 体系结构"></a>4. TCP/IP 体系结构</h3><p>它只有四层，相当于五层协议中数据链路层和物理层合并为网络接口层。</p><p>现在的 TCP/IP 体系结构不严格遵循 OSI 分层概念，应用层可能会直接使用 IP 层或者网络接口层。</p><p><div align="center"> <img src="../pics//45e0e0bf-386d-4280-a341-a0b9496c7674.png" width="400"> </div><br></p><p>TCP/IP 协议族是一种沙漏形状，中间小两边大，IP 协议在其中占用举足轻重的地位。</p><p><div align="center"> <img src="../pics//d4eef1e2-5703-4ca4-82ab-8dda93d6b81f.png" width="500"> </div><br></p><h1 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h1><h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><ol><li>单向通信，又称为单工通信；</li><li>双向交替通信，又称为半双工通信；</li><li>双向同时通信，又称为全双工通信。</li></ol><h2 id="带通调制"><a href="#带通调制" class="headerlink" title="带通调制"></a>带通调制</h2><p>模拟信号是连续的信号，数字信号是离散的信号。带通调制把数字信号转换为模拟信号。</p><p><div align="center"> <img src="../pics//7b68b142-9489-44f6-87b0-4cb5c6431e63.jpg" width="600"> </div><br></p><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><h3 id="1-频分复用、时分复用"><a href="#1-频分复用、时分复用" class="headerlink" title="1. 频分复用、时分复用"></a>1. 频分复用、时分复用</h3><p>频分复用的所有用户在相同的时间占用不同的频率带宽资源；时分复用的所有用户在不同的时间占用相同的频率带宽资源。</p><p>使用这两种方式进行通信，在通信的过程中用户会一直占用一部分信道资源。但是由于计算机数据的突发性质，通信过程没必要一直占用信道资源而不让出给其它用户使用，因此这两种方式对信道的利用率都不高。</p><p><div align="center"> <img src="../pics//f3bfe11f-9cba-4ff2-8cc6-629068408a80.jpg" width="600"> </div><br></p><h3 id="2-统计时分复用"><a href="#2-统计时分复用" class="headerlink" title="2. 统计时分复用"></a>2. 统计时分复用</h3><p>是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。</p><p><div align="center"> <img src="../pics//5999e5de-7c16-4b52-b3aa-6dc7b58c7894.png" width="700"> </div><br></p><h3 id="3-波分复用"><a href="#3-波分复用" class="headerlink" title="3. 波分复用"></a>3. 波分复用</h3><p>光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</p><p><div align="center"> <img src="../pics//21041ec2-babb-483f-bf47-8b8148eec162.png" width="700"> </div><br></p><h3 id="4-码分复用"><a href="#4-码分复用" class="headerlink" title="4. 码分复用"></a>4. 码分复用</h3><p>为每个用户分配 m bit 的码片，并且所有的码片正交，对于任意两个码片 <img src="https://latex.codecogs.com/gif.latex?\vec{S}"> 和 <img src="https://latex.codecogs.com/gif.latex?\vec{T}"> 有</p><p><div align="center"><img src="https://latex.codecogs.com/gif.latex?\frac{1}{m}\vec{S}\cdot\vec{T}=0"></div> <br></p><p>为了讨论方便，取 m=8，设码片 <img src="https://latex.codecogs.com/gif.latex?\vec{S}"> 为 00011011。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。</p><p>在计算时将 00011011 记作 (-1 -1 -1 +1 +1 -1 +1 +1)，可以得到</p><p><div align="center"><img src="https://latex.codecogs.com/gif.latex?\frac{1}{m}\vec{S}\cdot\vec{S}=1"></div> <br></p><p><div align="center"><img src="https://latex.codecogs.com/gif.latex?\frac{1}{m}\vec{S}\cdot\vec{S'}=-1"></div> <br></p><p>其中 <img src="https://latex.codecogs.com/gif.latex?\vec{S'}"> 为 <img src="https://latex.codecogs.com/gif.latex?\vec{S}"> 的反码。</p><p>利用上面的式子我们知道，当接收端使用码片 <img src="https://latex.codecogs.com/gif.latex?\vec{S}"> 对接收到的数据进行内积运算时，结果为 0 的是其它用户发送的数据，结果为 1 的是用户发送的比特 1，结果为 -1 的是用户发送的比特 0。</p><p>码分复用需要发送的数据量为原先的 m 倍。</p><p><div align="center"> <img src="../pics//92ad9bae-7d02-43ba-8115-a9d6f530ca28.png" width="600"> </div><br></p><h1 id="三、数据链路层"><a href="#三、数据链路层" class="headerlink" title="三、数据链路层"></a>三、数据链路层</h1><h2 id="信道分类"><a href="#信道分类" class="headerlink" title="信道分类"></a>信道分类</h2><ol><li>点对点信道：一对一通信方式；</li><li>广播信道：一对多通信方式。</li></ol><h2 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h2><h3 id="1-封装成帧"><a href="#1-封装成帧" class="headerlink" title="1. 封装成帧"></a>1. 封装成帧</h3><p>将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。</p><p><div align="center"> <img src="../pics//ea5f3efe-d5e6-499b-b278-9e898af61257.jpg" width="500"> </div><br></p><h3 id="2-透明传输"><a href="#2-透明传输" class="headerlink" title="2. 透明传输"></a>2. 透明传输</h3><p>透明表示一个实际存在的事物看起来好像不存在一样。</p><p>帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符，如果出现转义字符，那么就在转义字符前面再加个转义字符，在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。</p><p><div align="center"> <img src="../pics//c5022dd3-be22-4250-b9f6-38ae984a04d7.jpg" width="600"> </div><br></p><h3 id="3-差错检测"><a href="#3-差错检测" class="headerlink" title="3. 差错检测"></a>3. 差错检测</h3><p>目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错。</p><h2 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h2><p>局域网是典型的一种广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。</p><p>可以按照网络拓扑对局域网进行分类：</p><p><div align="center"> <img src="../pics//a6026bb4-3daf-439f-b1ec-a5a24e19d2fb.jpg" width="600"> </div><br></p><h2 id="PPP-协议"><a href="#PPP-协议" class="headerlink" title="PPP 协议"></a>PPP 协议</h2><p>用于点对点信道中。互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。</p><p><div align="center"> <img src="../pics//ddcf2327-8d84-425d-8535-121a94bcb88d.jpg" width="600"> </div><br></p><p>在 PPP 的帧中：</p><ul><li>F 字段为帧的定界符</li><li>A 和 C 字段暂时没有意义</li><li>FCS 字段是使用 CRC 的检验序列</li><li>信息部分的长度不超过 1500</li></ul><p><div align="center"> <img src="../pics//69f16984-a66f-4288-82e4-79b4aa43e835.jpg" width="500"> </div><br></p><h2 id="CSMA-CD-协议"><a href="#CSMA-CD-协议" class="headerlink" title="CSMA/CD 协议*"></a>CSMA/CD 协议*</h2><p>用于广播信道中。在广播信道上，同一时间只能允许一台计算机发送数据。</p><p>CSMA/CD 表示载波监听多点接入 / 碰撞检测。</p><ul><li><strong>多点接入</strong> ：说明这是总线型网络，许多计算机以多点的方式连接到总线上。</li><li><strong>载波监听</strong> ：每个站都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。</li><li><strong>碰撞检测</strong> ：在发送中，如果监听到信道已有其它站正在发送数据，就表示发生了碰撞。虽然每一个站在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</li></ul><p><div align="center"> <img src="../pics//5aa82b89-f266-44da-887d-18f31f01d8ef.png" width="600"> </div><br></p><p>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为  <strong>争用期</strong> 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</p><p>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用  <strong>截断二进制指数退避算法</strong>  来确定，从离散的整数集合 {0, 1, .., (2<sup>k</sup>-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</p><h2 id="扩展局域网"><a href="#扩展局域网" class="headerlink" title="扩展局域网*"></a>扩展局域网*</h2><h3 id="1-在物理层进行扩展"><a href="#1-在物理层进行扩展" class="headerlink" title="1. 在物理层进行扩展"></a>1. 在物理层进行扩展</h3><p>使用集线器进行扩展。</p><p>集线器的主要功能是对接收到的信号进行放大，以扩大网络的传输距离。</p><p>集线器不能根据 MAC 地址进行转发，而是以广播的方式发送数据帧。</p><p>集线器是一种共享式的传输设备，意味着同一时刻只能传输一组数据帧。</p><p><div align="center"> <img src="../pics//823cdab7-3779-4e3a-a951-dc2d154e0ee6.jpg" width="800"> </div><br></p><h3 id="2-在链路层进行扩展"><a href="#2-在链路层进行扩展" class="headerlink" title="2. 在链路层进行扩展"></a>2. 在链路层进行扩展</h3><p>最开始使用的是网桥，它收到一个帧时，根据帧的 MAC 地址，查找网桥中的地址表，确定帧转发的接口。</p><p>网桥不是共享式设备，因此性能比集线器这种共享式设备更高。</p><p>交换机的问世很快就淘汰了网桥，它实质上是一个多接口网桥，而网桥是两接口。交换机的每个接口都能直接与一个主机或者另一个交换机相连，并且一般都工作在全双工方式。</p><p>交换机具有自学习能力，学习的是交换表的内容。交换表中存储着 MAC 地址到接口的映射。下图中，交换机有 4 个接口，主机 A 向主机 B 发送数据帧时，交换机把主机 A 到接口 1 的映射写入交换表中。为了发送数据帧到 B，先查交换表，此时没有主机 B 的表项，那么主机 A 就发送广播帧，主机 C 和主机 D 会丢弃该帧。主机 B 收下之后，查找交换表得到主机 A 映射的接口为 1，就发送数据帧到接口 1，同时交换机添加主机 B 到接口 3 的映射。</p><p><div align="center"> <img src="../pics//c9cfcd20-c901-435f-9a07-3e46830c359f.jpg" width="800"> </div><br></p><h3 id="3-虚拟局域网"><a href="#3-虚拟局域网" class="headerlink" title="3. 虚拟局域网"></a>3. 虚拟局域网</h3><p>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息，例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。</p><p><div align="center"> <img src="../pics//a74b70ac-323a-4b31-b4d5-90569b8a944b.png" width="600"> </div><br></p><h2 id="MAC-层"><a href="#MAC-层" class="headerlink" title="MAC 层*"></a>MAC 层*</h2><p>MAC 地址是 6 字节（48 位）的地址，用于唯一标识网络适配器（网卡），一台主机拥有多少个适配器就有多少个 MAC 地址，例如笔记本电脑普遍存在无线网络适配器和有线网络适配器。</p><p><div align="center"> <img src="../pics//50d38e84-238f-4081-8876-14ef6d7938b5.jpg" width="600"> </div><br></p><p>在 MAC 帧中：</p><ul><li><strong>类型</strong> ：标记上层使用的协议；</li><li><strong>数据</strong> ：长度在 46-1500 之间，如果太小则需要填充；</li><li><strong>FCS</strong> ：帧检验序列，使用的是 CRC 检验方法；</li><li><strong>前同步码</strong> ：只是为了计算 FCS 临时加入的，计算结束之后会丢弃。</li></ul><h1 id="四、网络层"><a href="#四、网络层" class="headerlink" title="四、网络层*"></a>四、网络层*</h1><h2 id="网际协议-IP-概述"><a href="#网际协议-IP-概述" class="headerlink" title="网际协议 IP 概述"></a>网际协议 IP 概述</h2><p>因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。</p><p>使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。</p><p><div align="center"> <img src="../pics//7b038838-c75b-4538-ae84-6299386704e5.jpg" width="500"> </div><br></p><p>与 IP 协议配套使用的还有三个协议：</p><ol><li>地址解析协议 ARP（Address Resolution Protocol）</li><li>网际控制报文协议 ICMP（Internet Control Message Protocol）</li><li>网际组管理协议 IGMP（Internet Group Management Protocol）</li></ol><p><div align="center"> <img src="../pics//0a9f4125-b6ab-4e94-a807-fd7070ae726a.png" width="400"> </div><br></p><h2 id="IP-数据报格式"><a href="#IP-数据报格式" class="headerlink" title="IP 数据报格式"></a>IP 数据报格式</h2><p><div align="center"> <img src="../pics//85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg" width="700"> </div><br></p><ul><li><p><strong>版本</strong>  : 有 4（IPv4）和 6（IPv6）两个值；</p></li><li><p><strong>首部长度</strong>  : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为首部固定长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</p></li><li><p><strong>区分服务</strong>  : 用来获得更好的服务，一般情况下不使用。</p></li><li><p><strong>总长度</strong>  : 包括首部长度和数据部分长度。</p></li><li><p><strong>标识</strong>  : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</p></li><li><p><strong>片偏移</strong>  : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。</p></li></ul><p><div align="center"> <img src="../pics//23ba890e-e11c-45e2-a20c-64d217f83430.png" width="700"> </div><br></p><ul><li><p><strong>生存时间</strong>  ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</p></li><li><p><strong>协议</strong> ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</p></li><li><p><strong>首部检验和</strong> ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</p></li></ul><h2 id="IP-地址编址方式"><a href="#IP-地址编址方式" class="headerlink" title="IP 地址编址方式"></a>IP 地址编址方式</h2><p>IP 地址的编址方式经历了三个历史阶段：</p><ol><li>分类</li><li>子网划分</li><li>无分类</li></ol><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1. 分类"></a>1. 分类</h3><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p><p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 主机号 &gt;}</p><p><div align="center"> <img src="../pics//cbf50eb8-22b4-4528-a2e7-d187143d57f7.png" width="500"> </div><br></p><h3 id="2-子网划分"><a href="#2-子网划分" class="headerlink" title="2. 子网划分"></a>2. 子网划分</h3><p>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。注意，外部网络看不到子网的存在。</p><p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}</p><p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p><h3 id="3-无分类"><a href="#3-无分类" class="headerlink" title="3. 无分类"></a>3. 无分类</h3><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p><p>IP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p><p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p><p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p><p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为  <strong>构成超网</strong> 。</p><p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p><h2 id="IP-地址和-MAC-地址"><a href="#IP-地址和-MAC-地址" class="headerlink" title="IP 地址和 MAC 地址"></a>IP 地址和 MAC 地址</h2><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</p><p><div align="center"> <img src="../pics//66192382-558b-4b05-a35d-ac4a2b1a9811.jpg" width="700"> </div><br></p><h2 id="地址解析协议-ARP"><a href="#地址解析协议-ARP" class="headerlink" title="地址解析协议 ARP"></a>地址解析协议 ARP</h2><p>实现由 IP 地址得到 MAC 地址。</p><p><div align="center"> <img src="../pics//b9d79a5a-e7af-499b-b989-f10483e71b8b.jpg" width="500"> </div><br></p><p>每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。</p><p>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到硬件地址的映射。</p><p><div align="center"> <img src="../pics//8006a450-6c2f-498c-a928-c927f758b1d0.png" width="700"> </div><br></p><h2 id="路由器的结构"><a href="#路由器的结构" class="headerlink" title="路由器的结构"></a>路由器的结构</h2><p>路由器从功能上可以划分为：路由选择和分组转发。</p><p>分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。</p><p><div align="center"> <img src="../pics//c3369072-c740-43b0-b276-202bd1d3960d.jpg" width="600"> </div><br></p><h2 id="路由器分组转发流程"><a href="#路由器分组转发流程" class="headerlink" title="路由器分组转发流程"></a>路由器分组转发流程</h2><ol><li>从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。</li><li>若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；</li><li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；</li><li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；</li><li>报告转发分组出错。</li></ol><p><div align="center"> <img src="../pics//1ab49e39-012b-4383-8284-26570987e3c4.jpg" width="800"> </div><br></p><h2 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h2><p>互联网使用的路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。</p><p>互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p><p>可以把路由选择协议划分为两大类：</p><ol><li>内部网关协议 IGP（Interior Gateway Protocol）：在 AS 内部使用，如 RIP 和 OSPF。</li><li>外部网关协议 EGP（External Gateway Protocol）：在 AS 之间使用，如 BGP。</li></ol><p><div align="center"> <img src="../pics//276c31df-3b28-4ac2-b006-1e80fc86a64f.jpg" width="600"> </div><br></p><h3 id="1-内部网关协议-RIP"><a href="#1-内部网关协议-RIP" class="headerlink" title="1. 内部网关协议 RIP"></a>1. 内部网关协议 RIP</h3><p>RIP 是一种分布式的基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1，跳数最多为 15，超过 15 表示不可达。</p><p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p><p>距离向量算法：</p><ol><li>对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；</li><li>对修改后的 RIP 报文中的每一个项目，进行以下步骤：<ul><li>若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；</li><li>否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。</li></ul></li><li>若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。</li></ol><p>RIP 协议实现简单，开销小，但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p><h3 id="2-内部网关协议-OSPF"><a href="#2-内部网关协议-OSPF" class="headerlink" title="2. 内部网关协议 OSPF"></a>2. 内部网关协议 OSPF</h3><p>开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p><p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。</p><p>OSPF 具有以下特点：</p><ul><li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li><li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li><li>只有当链路状态发生变化时，路由器才会发送信息。</li></ul><p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p><h3 id="3-外部网关协议-BGP"><a href="#3-外部网关协议-BGP" class="headerlink" title="3. 外部网关协议 BGP"></a>3. 外部网关协议 BGP</h3><p>AS 之间的路由选择很困难，主要是互联网规模很大。并且各个 AS 内部使用不同的路由选择协议，就无法准确定义路径的度量。并且 AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</p><p>BGP 只能寻找一条比较好的路由，而不是最佳路由。它采用路径向量路由选择协议。</p><p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p><p><div align="center"> <img src="../pics//9cd0ae20-4fb5-4017-a000-f7d3a0eb3529.png" width="600"> </div><br></p><h2 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h2><p>ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。</p><p><div align="center"> <img src="../pics//e3124763-f75e-46c3-ba82-341e6c98d862.jpg" width="500"> </div><br></p><p>ICMP 报文分为差错报告报文和询问报文。</p><p><div align="center"> <img src="../pics//aa29cc88-7256-4399-8c7f-3cf4a6489559.png" width="600"> </div><br></p><h2 id="分组网间探测-PING"><a href="#分组网间探测-PING" class="headerlink" title="分组网间探测 PING"></a>分组网间探测 PING</h2><p>PING 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</p><p>Ping 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报。</p><p>Ping 的过程：</p><ol><li>源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，但 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；</li><li>源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。</li><li>不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。</li><li>之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</li></ol><h2 id="虚拟专用网-VPN"><a href="#虚拟专用网-VPN" class="headerlink" title="虚拟专用网 VPN"></a>虚拟专用网 VPN</h2><p>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。</p><p>有三个专用地址块：</p><ol><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ol><p>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指“好像是”，而实际上并不是，它有经过公用的互联网。</p><p>下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。</p><p><div align="center"> <img src="../pics//1556770b-8c01-4681-af10-46f1df69202c.jpg" width="800"> </div><br></p><h2 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换 NAT"></a>网络地址转换 NAT</h2><p>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</p><p>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把运输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。</p><p><div align="center"> <img src="../pics//2719067e-b299-4639-9065-bed6729dbf0b.png" width=""> </div><br></p><h1 id="五、运输层"><a href="#五、运输层" class="headerlink" title="五、运输层*"></a>五、运输层*</h1><p>网络层只把分组发送到目的主机，但是真正通信的并不是主机而是主机中的进程。运输层提供了进程间的逻辑通信，运输层向高层用户屏蔽了下面网络层的核心细节，使应用程序看见的好像在两个运输层实体之间有一条端到端的逻辑通信信道。</p><h2 id="UDP-和-TCP-的特点"><a href="#UDP-和-TCP-的特点" class="headerlink" title="UDP 和 TCP 的特点"></a>UDP 和 TCP 的特点</h2><ul><li><p>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部）。</p></li><li><p>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块）。</p></li></ul><h2 id="UDP-首部格式"><a href="#UDP-首部格式" class="headerlink" title="UDP 首部格式"></a>UDP 首部格式</h2><p><div align="center"> <img src="../pics//d4c3a4a1-0846-46ec-9cc3-eaddfca71254.jpg" width="600"> </div><br></p><p>首部字段只有 8 个字节，包括源端口、目的端口、长度、检验和。12 字节的伪首部是为了计算检验和临时添加的。</p><h2 id="TCP-首部格式"><a href="#TCP-首部格式" class="headerlink" title="TCP 首部格式"></a>TCP 首部格式</h2><p><div align="center"> <img src="../pics//55dc4e84-573d-4c13-a765-52ed1dd251f9.png" width="700"> </div><br></p><ul><li><p><strong>序号</strong>  ：用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</p></li><li><p><strong>确认号</strong>  ：期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</p></li><li><p><strong>数据偏移</strong>  ：指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</p></li><li><p><strong>确认 ACK</strong>  ：当 ACK=1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</p></li><li><p><strong>同步 SYN</strong>  ：在连接建立时用来同步序号。当 SYN=1，ACK=0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN=1，ACK=1。</p></li><li><p><strong>终止 FIN</strong>  ：用来释放一个连接，当 FIN=1 时，表示此报文段的发送方的数据已发送完毕，并要求释放运输连接。</p></li><li><p><strong>窗口</strong>  ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</p></li></ul><h2 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h2><p><div align="center"> <img src="../pics//e92d0ebc-7d46-413b-aec1-34a39602f787.png" width="600"> </div><br></p><p>假设 A 为客户端，B 为服务器端。</p><ol><li><p>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</p></li><li><p>A 向 B 发送连接请求报文段，SYN=1，ACK=0，选择一个初始的序号 x。</p></li><li><p>B 收到连接请求报文段，如果同意建立连接，则向 A 发送连接确认报文段，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</p></li><li><p>A 收到 B 的连接确认报文段后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</p></li><li><p>B 收到 A 的确认后，连接建立。</p></li></ol><p><strong>三次握手的原因</strong> </p><p>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</p><p>失效的连接请求是指，客户端发送的连接请求在网络中滞留，客户端因为没及时收到服务器端发送的连接确认，因此就重新发送了连接请求。滞留的连接请求并不是丢失，之后还是会到达服务器。如果不进行第三次握手，那么服务器会误认为客户端重新请求连接，然后打开了连接。但是并不是客户端真正打开这个连接，因此客户端不会给服务器发送数据，这个连接就白白浪费了。</p><h2 id="TCP-的四次挥手"><a href="#TCP-的四次挥手" class="headerlink" title="TCP 的四次挥手"></a>TCP 的四次挥手</h2><p><div align="center"> <img src="../pics//f87afe72-c2df-4c12-ac03-9b8d581a8af8.jpg" width="600"> </div><br></p><p>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</p><ol><li><p>A 发送连接释放报文段，FIN=1。</p></li><li><p>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</p></li><li><p>当 B 要不再需要连接时，发送连接释放请求报文段，FIN=1。</p></li><li><p>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2MSL 时间后释放连接。</p></li><li><p>B 收到 A 的确认后释放连接。</p></li></ol><p><strong>四次挥手的原因</strong> </p><p>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</p><p><strong>TIME_WAIT</strong> </p><p>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：</p><ol><li><p>确保最后一个确认报文段能够到达。如果 B 没收到 A 发送来的确认报文段，那么就会重新发送连接释放请求报文段，A 等待一段时间就是为了处理这种情况的发生。</p></li><li><p>等待一段时间是为了让本连接持续时间内所产生的所有报文段都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文段。</p></li></ol><h2 id="TCP-滑动窗口"><a href="#TCP-滑动窗口" class="headerlink" title="TCP 滑动窗口"></a>TCP 滑动窗口</h2><p><div align="center"> <img src="../pics//a3253deb-8d21-40a1-aae4-7d178e4aa319.jpg" width="800"> </div><br></p><p>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</p><p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p><p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 32, 34, 35}，其中 {31, 32} 按序到达，而 {34, 35} 就不是，因此只对字节 32 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。</p><h2 id="TCP-可靠传输"><a href="#TCP-可靠传输" class="headerlink" title="TCP 可靠传输"></a>TCP 可靠传输</h2><p>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</p><p>一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：</p><p><div align="center"><img src="https://latex.codecogs.com/gif.latex?RTTs=(1-a)*(RTTs)+a*RTT"></div> <br></p><p>超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：</p><p><div align="center"><img src="https://latex.codecogs.com/gif.latex?RTO=RTTs+4*RTT_d"></div> <br></p><p>其中 RTT<sub>d</sub> 为偏差。</p><h2 id="TCP-流量控制"><a href="#TCP-流量控制" class="headerlink" title="TCP 流量控制"></a>TCP 流量控制</h2><p>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</p><p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><h2 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h2><p>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接受，而拥塞控制是为了降低整个网络的拥塞程度。</p><p><div align="center"> <img src="../pics//51e2ed95-65b8-4ae9-8af3-65602d452a25.jpg" width="500"> </div><br></p><p>TCP 主要通过四种算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量。注意拥塞窗口与发送方窗口的区别，拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</p><p>为了便于讨论，做如下假设：</p><ol><li>接收方有足够大的接收缓存，因此不会发生流量控制；</li><li>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。</li></ol><p><div align="center"> <img src="../pics//910f613f-514f-4534-87dd-9b4699d59d31.png" width="800"> </div><br></p><h3 id="1-慢开始与拥塞避免"><a href="#1-慢开始与拥塞避免" class="headerlink" title="1. 慢开始与拥塞避免"></a>1. 慢开始与拥塞避免</h3><p>发送的最初执行慢开始，令 cwnd=1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p><p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;= ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p><p>如果出现了超时，则令 ssthresh = cwnd/2，然后重新执行慢开始。</p><h3 id="2-快重传与快恢复"><a href="#2-快重传与快恢复" class="headerlink" title="2. 快重传与快恢复"></a>2. 快重传与快恢复</h3><p>在接收方，要求每次接收到报文段都应该发送对已收到有序报文段的确认，例如已经接收到 M<sub>1</sub> 和 M<sub>2</sub>，此时收到 M<sub>4</sub>，应当发送对 M<sub>2</sub> 的确认。</p><p>在发送方，如果收到三个重复确认，那么可以确认下一个报文段丢失，例如收到三个 M<sub>2</sub> ，则 M<sub>3</sub> 丢失。此时执行快重传，立即重传下一个报文段。</p><p>在这种情况下，只是丢失个别报文段，而不是网络拥塞，因此执行快恢复，令 ssthresh = cwnd/2 ，cwnd = ssthresh，注意到此时直接进入拥塞避免。</p><p><div align="center"> <img src="../pics//f61b5419-c94a-4df1-8d4d-aed9ae8cc6d5.png" width="600"> </div><br></p><h1 id="六、应用层"><a href="#六、应用层" class="headerlink" title="六、应用层*"></a>六、应用层*</h1><h2 id="域名系统-DNS"><a href="#域名系统-DNS" class="headerlink" title="域名系统 DNS"></a>域名系统 DNS</h2><p>把主机名解析为 IP 地址。</p><p>被设计成分布式系统。</p><h3 id="1-层次结构"><a href="#1-层次结构" class="headerlink" title="1. 层次结构"></a>1. 层次结构</h3><p>一个域名由多个层次构成，从上层到下层分别为顶级域名、二级域名、三级域名以及四级域名。所有域名可以画成一颗域名树。</p><p><div align="center"> <img src="../pics//c2117f61-1177-4768-bf33-cf4f950d911c.png" width=""> </div><br></p><p><div align="center"> <img src="../pics//a4b162e5-db2a-4a27-b213-1fe481c5a06a.png" width=""> </div><br></p><p>域名服务器可以分为以下四类：</p><ol><li>根域名服务器：解析顶级域名；</li><li>顶级域名服务器：解析二级域名；</li><li>权限域名服务器：解析区内的域名；</li><li>本地域名服务器：也称为默认域名服务器。可以在其中配置高速缓存。</li></ol><p>区和域的概念不同，可以在一个域中划分多个区。图 b 在域 abc.com 中划分了两个区：abc.com 和 y.abc.com</p><p><div align="center"> <img src="../pics//fc0c6b2d-68c7-4de8-aaaa-97355a4f0472.jpg" width=""> </div><br></p><p>因此就需要两个权限域名服务器：</p><p><div align="center"> <img src="../pics//8b335d94-c1ca-42e1-ad48-bb179d28a4f1.jpg" width=""> </div><br></p><h3 id="2-解析过程"><a href="#2-解析过程" class="headerlink" title="2. 解析过程"></a>2. 解析过程</h3><p>主机向本地域名服务器解析的过程采用递归，而本地域名服务器向其它域名服务器解析可以使用递归和迭代两种方式。</p><p>迭代的方式下，本地域名服务器向一个域名服务器解析请求解析之后，结果返回到本地域名服务器，然后本地域名服务器继续向其它域名服务器请求解析；而递归的方式下，结果不是直接返回的，而是继续向前请求解析，最后的结果才会返回。</p><p><div align="center"> <img src="../pics//e6723b94-1a33-4605-b775-f6813352d383.png" width="800"> </div><br></p><h3 id="3-使用的运输层协议"><a href="#3-使用的运输层协议" class="headerlink" title="3. 使用的运输层协议"></a>3. 使用的运输层协议</h3><p>DNS 在解析的过程使用 UDP 进行传输，因为 UDP 最大只支持 512 字节的数据，如果超过的话就需要使用 TCP 传输。</p><h2 id="文件传输协议-FTP"><a href="#文件传输协议-FTP" class="headerlink" title="文件传输协议 FTP"></a>文件传输协议 FTP</h2><p>FTP 在运输层使用 TCP，并且需要建立两个并行的 TCP 连接：控制连接和数据连接。控制连接在整个会话期间一直保持打开，而数据连接在数据传送完毕之后就关闭。控制连接使用端口号 21，数据连接使用端口号 20。</p><p><div align="center"> <img src="../pics//30210b86-472d-4574-abb6-b74898cc17a4.jpg" width="700"> </div><br></p><h2 id="远程终端协议-TELNET"><a href="#远程终端协议-TELNET" class="headerlink" title="远程终端协议 TELNET"></a>远程终端协议 TELNET</h2><p>TELNET 用于登录到远程主机上，并且远程主机上的输出也会返回。</p><p>TELNET 可以适应许多计算机和操作系统的差异，例如不同操作系统系统的换行符定义。</p><h2 id="电子邮件协议"><a href="#电子邮件协议" class="headerlink" title="电子邮件协议"></a>电子邮件协议</h2><p>一个电子邮件系统由三部分组成：用户代理、邮件服务器以及邮件发送协议和读取协议。其中发送协议常用 SMTP，读取协议常用 POP3 和 IMAP。</p><p><div align="center"> <img src="../pics//7b3efa99-d306-4982-8cfb-e7153c33aab4.png" width="700"> </div><br></p><h3 id="1-POP3"><a href="#1-POP3" class="headerlink" title="1. POP3"></a>1. POP3</h3><p>POP3 的特点是只要用户从服务器上读取了邮件，就把该邮件删除。</p><h3 id="2-IMAP"><a href="#2-IMAP" class="headerlink" title="2. IMAP"></a>2. IMAP</h3><p>IMAP 协议中客户端和服务器上的邮件保持同步，如果不去手动删除邮件，那么服务器上的邮件也不会被删除。IMAP 这种做法可以让用户随时随地去访问服务器上的邮件。IMAP 协议也支持创建自定义的文件夹。</p><h3 id="3-SMTP"><a href="#3-SMTP" class="headerlink" title="3. SMTP"></a>3. SMTP</h3><p>SMTP 只能发送 ASCII 码，而互联网邮件扩充 MIME 可以发送二进制文件。MIME 并没有改动或者取代 SMTP，而是增加邮件主题的结构，定义了非 ASCII 码的编码规则。</p><p><div align="center"> <img src="../pics//ed5522bb-3a60-481c-8654-43e7195a48fe.png" width=""> </div><br></p><h2 id="动态主机配置协议-DHCP"><a href="#动态主机配置协议-DHCP" class="headerlink" title="动态主机配置协议 DHCP"></a>动态主机配置协议 DHCP</h2><p>DHCP 提供了即插即用的连网方式，用户不再需要去手动配置 IP 地址等信息。</p><p>DHCP 配置的内容不仅是 IP 地址，还包括子网掩码、默认路由器 IP 地址、域名服务器的 IP 地址。</p><p>工作方式如下：需要 IP 地址的主机广播发送 DHCP 发现报文（将目的地址置为全 1，即 255.255.255.255:67，源地址设置为全 0，即 0.0.0.0:68），DHCP 服务器收到发现报文之后，则在 IP 地址池中取一个地址，发送 DHCP 提供报文给该主机。</p><h2 id="点对点传输-P2P"><a href="#点对点传输-P2P" class="headerlink" title="点对点传输 P2P"></a>点对点传输 P2P</h2><p>把某个文件分发的所有对等集合称为一个洪流。文件的数据单元称为文件块，它的大小是固定的。一个新的对等方加入某个洪流，一开始并没有文件块，但是能够从其它对等方中逐渐地下载到一些文件块，与此同时，它也为别的对等方上传一些文件块。</p><p>每个洪流都有一个基础设施，称为追踪器。当一个对等方加入洪流时，必须向追踪器登记，并周期性地通知追踪器它仍在洪流中。可以在任何时间加入和退出某个洪流。</p><p>一个新的对等方加入洪流时，追踪器会随机从洪流中选择若干个对等方，并让新对等方与这些对等方建立连接，把这些对等方称为相邻对等方。接收和发送文件块都是在相邻对等方中进行。</p><p>当一个对等方需要很多文件块时，通过使用最稀有优先的策略来取得文件块，也就是一个文件块在相邻对等方中副本最少，那么就优先请求这个文件块。</p><p>当很多对等方向同一个对等方请求文件块时，该对等方优先选择以最高速率向其发送文件块的对等方。</p><p>P2P 是一个分布式系统，任何时候都有对等方加入或者退出。使用分布式散列表 DHT，可以查找洪流中的资源和 IP 地址映射。</p><h2 id="Web-页面请求过程"><a href="#Web-页面请求过程" class="headerlink" title="Web 页面请求过程"></a>Web 页面请求过程</h2><h3 id="1-DHCP-配置主机信息"><a href="#1-DHCP-配置主机信息" class="headerlink" title="1. DHCP 配置主机信息"></a>1. DHCP 配置主机信息</h3><ol><li><p>假设主机最开始没有 IP 地址以及其它信息，那么就需要先使用 DHCP 来获取。</p></li><li><p>主机生成一个 DHCP 请求报文，并将这个报文放入具有目的端口 67 和源端口 68 的 UDP 报文段中。</p></li><li><p>该报文段则被放入在一个具有广播 IP 目的地址(255.255.255.255) 和源 IP 地址（0.0.0.0）的 IP 数据报中。</p></li><li><p>该数据报则被放置在 MAC 帧中，该帧具有目的地址 FF:FF:FF:FF:FF:FF，将广播到与交换机连接的所有设备。</p></li><li><p>连接在交换机的 DHCP 服务器收到广播帧之后，不断地向上分解得到 IP 数据报、UDP 报文段、DHCP 请求报文，之后生成 DHCP ACK 报文，该报文包含以下信息：IP 地址、DNS 服务器的 IP 地址、默认网关路由器的 IP 地址和子网掩码。该报文被放入 UDP 报文段中，UDP 报文段有被放入 IP 数据报中，最后放入 MAC 帧中。</p></li><li><p>该帧的目的地址是请求主机的 MAC 地址，因为交换机具有自学习能力，之前主机发送了广播帧之后就记录了 MAC 地址到其转发接口的交换表项，因此现在交换机就可以直接知道应该向哪个接口发送该帧。</p></li><li><p>主机收到该帧后，不断分解得到 DHCP 报文。之后就配置它的 IP 地址、子网掩码和 DNS 服务器的 IP 地址，并在其 IP 转发表中安装默认网关。</p></li></ol><h3 id="2-ARP-解析-MAC-地址"><a href="#2-ARP-解析-MAC-地址" class="headerlink" title="2. ARP 解析 MAC 地址"></a>2. ARP 解析 MAC 地址</h3><ol><li><p>主机通过浏览器生成一个 TCP 套接字，套接字向 HTTP 服务器发送 HTTP 请求。为了生成该套接字，主机需要知道网站的域名对应的 IP 地址。</p></li><li><p>主机生成一个 DNS 查询报文，该报文具有 53 号端口，因为 DNS 服务器的端口号是 53。</p></li><li><p>该 DNS 查询报文被放入目的地址为 DNS 服务器 IP 地址的 IP 数据报中。</p></li><li><p>该 IP 数据报被放入一个以太网帧中，该帧将发送到网关路由器。</p></li><li><p>DHCP 过程只知道网关路由器的 IP 地址，为了获取网关路由器的 MAC 地址，需要使用 ARP 协议。</p></li><li><p>主机生成一个包含目的地址为网关路由器 IP 地址的 ARP 查询报文，将该 ARP 查询报文放入一个具有广播目的地址（FF:FF:FF:FF:FF:FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧转发给所有的连接设备，包括网关路由器。</p></li><li><p>网关路由器接收到该帧后，不断向上分解得到 ARP 报文，发现其中的 IP 地址与其接口的 IP 地址匹配，因此就发送一个 ARP 回答报文，包含了它的 MAC 地址，发回给主机。</p></li></ol><h3 id="3-DNS-解析域名"><a href="#3-DNS-解析域名" class="headerlink" title="3. DNS 解析域名"></a>3. DNS 解析域名</h3><ol><li><p>知道了网关路由器的 MAC 地址之后，就可以继续 DNS 的解析过程了。</p></li><li><p>网关路由器接收到包含 DNS 查询报文的以太网帧后，抽取出 IP 数据报，并根据转发表决定该 IP 数据报应该转发的路由器。</p></li><li><p>因为路由器具有内部网关协议（RIP、OSPF）和外部网关协议（BGP）这两种路由选择协议，因此路由表中已经配置了网关路由器到达 DNS 服务器的路由表项。</p></li><li><p>到达 DNS 服务器之后，DNS 服务器抽取出 DNS 查询报文，并在 DNS 数据库中查找待解析的域名。</p></li><li><p>找到 DNS 记录之后，发送 DNS 回答报文，将该回答报文放入 UDP 报文段中，然后放入 IP 数据报中，通过路由器反向转发回网关路由器，并经过以太网交换机到达主机。</p></li></ol><h3 id="4-HTTP-请求页面"><a href="#4-HTTP-请求页面" class="headerlink" title="4. HTTP 请求页面"></a>4. HTTP 请求页面</h3><ol><li><p>有了 HTTP 服务器的 IP 地址之后，主机就能够生成 TCP 套接字，该套接字将用于向 Web 服务器发送 HTTP GET 报文。</p></li><li><p>在生成 TCP 套接字之前，必须先与 HTTP 服务器进行三次握手来建立连接。生成一个具有目的端口 80 的 TCP SYN 报文段，并向 HTTP 服务器发送该报文段。</p></li><li><p>HTTP 服务器收到该报文段之后，生成 TCP SYNACK 报文段，发回给主机。</p></li><li><p>连接建立之后，浏览器生成 HTTP GET 报文，并交付给 HTTP 服务器。</p></li><li><p>HTTP 服务器从 TCP 套接字读取 HTTP GET 报文，生成一个 HTTP 响应报文，将 Web 页面内容放入报文主体中，发回给主机。</p></li><li><p>浏览器收到 HTTP 响应报文后，抽取出 Web 页面内容，之后进行渲染，显示 Web 页面。</p></li></ol><h2 id="常用端口"><a href="#常用端口" class="headerlink" title="常用端口"></a>常用端口</h2><table><thead><tr><th style="text-align:center">应用</th><th style="text-align:center">应用层协议</th><th style="text-align:center">端口号</th><th style="text-align:center">运输层协议</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">域名解析</td><td style="text-align:center">DNS</td><td style="text-align:center">53</td><td style="text-align:center">UDP/TCP</td><td style="text-align:center">长度超过 512 字节时使用 TCP</td></tr><tr><td style="text-align:center">动态主机配置协议</td><td style="text-align:center">DHCP</td><td style="text-align:center">67/68</td><td style="text-align:center">UDP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">简单网络管理协议</td><td style="text-align:center">SNMP</td><td style="text-align:center">161/162</td><td style="text-align:center">UDP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">文件传送协议</td><td style="text-align:center">FTP</td><td style="text-align:center">20/21</td><td style="text-align:center">TCP</td><td style="text-align:center">控制连接 21，数据连接 20</td></tr><tr><td style="text-align:center">远程终端协议</td><td style="text-align:center">TELNET</td><td style="text-align:center">23</td><td style="text-align:center">TCP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">超文本传送协议</td><td style="text-align:center">HTTP</td><td style="text-align:center">80</td><td style="text-align:center">TCP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">简单邮件传送协议</td><td style="text-align:center">SMTP</td><td style="text-align:center">25</td><td style="text-align:center">TCP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">邮件读取协议</td><td style="text-align:center">POP3</td><td style="text-align:center">110</td><td style="text-align:center">TCP</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">网际报文存取协议</td><td style="text-align:center">IMAP</td><td style="text-align:center">143</td><td style="text-align:center">TCP</td></tr></tbody></table><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>计算机网络, 谢希仁</li><li>JamesF.Kurose, KeithW.Ross, 库罗斯, 等. 计算机网络: 自顶向下方法 [M]. 机械工业出版社, 2014.</li><li><a href="http://www.climatechangenews.com/2011/html/university-tokyo.html" target="_blank" rel="noopener">Tackling emissions targets in Tokyo</a></li><li><a href="http://www.climatechangenews.com/2011/html/university-tokyo.html" target="_blank" rel="noopener">What does my ISP know when I use Tor?</a></li><li><a href="http://www.linyibin.cn/2017/02/12/technology-ComputerNetworking-Internet/" target="_blank" rel="noopener">Technology-Computer Networking[1]-Computer Networks and the Internet</a></li><li><a href="http://slidesplayer.com/slide/11616167/" target="_blank" rel="noopener">P2P 网络概述.</a></li><li><a href="http://slideplayer.com/slide/5115386/" target="_blank" rel="noopener">Circuit Switching (a) Circuit switching. (b) Packet switching.</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#一概述&quot;&gt;一、概述&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#网络的网络&quot;&gt;网络的网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#isp&quot;&gt;ISP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#主机之间的通信方式&quot;&gt;主机之间的通信方式&lt;
      
    
    </summary>
    
      <category term="计算机基础" scheme="blog.cuteximi.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机网络" scheme="blog.cuteximi.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Oracle-study</title>
    <link href="blog.cuteximi.com/oracle-study/"/>
    <id>blog.cuteximi.com/oracle-study/</id>
    <published>2018-03-29T01:58:14.000Z</published>
    <updated>2018-03-29T02:11:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Oracle相关记录（by 陶世磊）2018-03-21 参考网络资源整理</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Oracle Server 是由实例（instance）和数据库（database）组成。实例（instance）是由共享内存（SGA）和后台进程组成。数据库（dababase）是存储在磁盘的一系列文件。</p><p><img src="https://upload-images.jianshu.io/upload_images/5317394-8ac0f55fc3443053.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="详述"><a href="#详述" class="headerlink" title="详述"></a>详述</h1><h3 id="SGA"><a href="#SGA" class="headerlink" title="SGA"></a>SGA</h3><p>SGA主要由Share Pool（共享池，又分Library Cache和Data Dictionary Cache，前者临时存储最近执行过的语句代码等，后者临时存储数据位置、表定义及用户权限等）、</p><h3 id="数据缓冲区"><a href="#数据缓冲区" class="headerlink" title="数据缓冲区"></a>数据缓冲区</h3><p>Database Buffer Cache（数据缓冲区，临时存储读过的数据块）、Redo Log Buffer（重做日志缓冲区，临时存储数据库修改操作）、Large Pool（大池，分担Share Pool部分工作供共享服务器进程使用，如备份恢复、大型I/O操作、并行查询等）和Java Pool（Java池，分析Java语句）。</p><h3 id="后台进程"><a href="#后台进程" class="headerlink" title="后台进程"></a>后台进程</h3><p>后台进程是数据库和操作系统进行交互的通道，后台进程的命名由ORACLE_SID决定，ORACLE根据ORACLE_SID来寻找参数文件启动实例。是Oracle数据库为保持最佳性能和协调多用户请求而设置的，主要有DBWR（将Database Buffer Cache数据写入Data Files）、LGWR（将Redo Log Buffer数据写入Redo Log Files）<br>CKPT（协调数据文件、控制文件和重做日志，将System Change Number即SCN写入到控制文件和数据文件头部，促使DBWR、LGWR执行）、SMON（System Monitor，3方面作用：instance recovery实例故障数据恢复、合并空闲碎片空间、回收临时段）、PMON（用户例程意外终止时处理事务，如回退事务、释放锁及其他资源等）、ARCH（将Redo Log Files写入Archive Log Files）、CJQ0（job queue coordinator）、RVWR（recover writer，为flashback database提供日志记录）等进程。</p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库（database）是指存储在磁盘上的一组物理文件，如数据文件（Data files，用于存储数据）、控制文件（Control files，存储数据文件、重做日志文件、归档日志文件位置及维护数据库完整性所需信息）<br>和重做日志文件（Redo Log files，存储修改数据的所有操作记录以备故障后恢复），这三个是启动数据库必须的文件；另外还有参数文件（Parameter file，设置内存后台进程的启动等）、归档日志文件（Archived Log files，归档记录写满的重做日志文件的内容）和口令文件（Password file，验证用户名密码），这三个是非必须的文件。</p><h1 id="数据库启动三种状态"><a href="#数据库启动三种状态" class="headerlink" title="数据库启动三种状态"></a>数据库启动三种状态</h1><p>数据库启动的三种方式（三个阶段）：</p><ul><li>nomount : 需要参数文件</li><li>mount ： 需要控制文件</li><li>open：需要全部的数据文件和日志文件，并且保证所有的数据文件和日志文件与控制文件里面记录的位置保持一致。</li></ul><blockquote><p>一般的启动顺序是：nomount–&gt;mount–&gt;open</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/5317394-ec40b1d8dabf3988.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="oracle-start-700x375.png"></p><h1 id="启动详解"><a href="#启动详解" class="headerlink" title="启动详解"></a>启动详解</h1><h3 id="①-nomount"><a href="#①-nomount" class="headerlink" title="① nomount"></a>① nomount</h3><p>nomount状态：启动实例。<br>Reading the initialization file from $ORACLE_HOME/dbs in the following order:</p><p>从环境变量下dbs目录按如下顺序读取初始化文件：</p><p>-first  spfileSID.ora</p><p>首先，读取spfile+实例名.ora</p><p>-if not found then, spfile.ora</p><p>若未发现文件则读取spfile.ora</p><p>-if not found then, initSID.ora</p><p>若未发现文件则读取init+实例名.ora</p><p>Specifying the PFILE parameter with STARTUP overrides the default behavior.</p><p>指定pfile参数文件启动以替代默认启动方式</p><ul><li>Allocating the SGA</li></ul><p>分配SGA</p><ul><li>Starting the background processes</li></ul><p>启动后台进程</p><ul><li>Opening the alertSID.log file and the trace files</li></ul><p>启动预警日志文件（记录实例生命周期内事件，如系统内部错误、数据块损坏、系统参数修改等）和追踪文件（记录SQL操作及时间消耗等）</p><p>The database must be named with the DB_NAME parameter either in the initialization Parameter file or in the STARTUP command.</p><p>数据库必须用初始参数文件或启动命令中的DB_NAME参数命名。</p><h3 id="②-mount"><a href="#②-mount" class="headerlink" title="② mount"></a>② mount</h3><p>mount状态：关联实例与数据库，读取控制文件并获取数据文件和重做日志文件名称状态。</p><p>Mounting a database includes the following tasks:</p><p>装载数据库包括以下任务：</p><ul><li>Associating a database with a previously started instance</li></ul><p>将先前启动的实例与数据库相关联</p><ul><li>Locating and opening the control files specified in the parameter file</li></ul><p>从参数文件中找到控制文件位置并打开</p><ul><li>Reading the control files to obtain the names and status of the data files and online redo log files.However,no checks are performed to verify the existence of the data files and online redo log files at this time.</li></ul><p>从控制文件中读取数据文件及重做日志文件名称与状态，但是，此时并不检查数据文件与重做日志文件的存在性。</p><h3 id="③-open"><a href="#③-open" class="headerlink" title="③ open"></a>③ open</h3><p>open状态：</p><p>opening the database includes the following tasks:</p><p>打开数据库包含以下任务：</p><p>opening the online data log files</p><p>打开数据文件</p><p>opening the onling redo log files</p><p>打开重做日志文件</p><p>If any of the datafiles or noline redo log files are not present when you attempt to open the database ,the oracle server returns an error.</p><p>若在打开数据库时数据文件或重做日志文件任何一个不存在，则Oracle服务器返回一个错误。</p><p>During this final stage,the oracle server verfies that all the data files and online redo log files can be opened and checks the consistency of the database. If necessary,the SMON background process initiates instance recovery.</p><p>在最后阶段，Oracle数据库验证数据文件和重做日志文件可否打开并检验数据库的一致性，若不一致，SMON后台进程将启动实例恢复。</p><h4 id="shutdown或startup状态可执行的操作："><a href="#shutdown或startup状态可执行的操作：" class="headerlink" title="shutdown或startup状态可执行的操作："></a>shutdown或startup状态可执行的操作：</h4><h4 id="shutdown相关"><a href="#shutdown相关" class="headerlink" title="shutdown相关"></a>shutdown相关</h4><p>shutdown有四个参数：normal、transactional、immediate、abort，不带参数默认为normal。</p><p>shutdown normal：不断开现在连接用户，阻止任何用户建立新的连接，包括管理员在内。已经连接的用户能够继续他们当前的工作，如递交新的更新事务，直到此用户自行断开连接。这样需要等待的时间长，可以查出现连用户，再通知其自行断开。所有的用户都断开连接，数据库才进行关闭操作，即关闭数据库、卸载数据库、终止例程。在这种情况下关闭的数据库在重新启动后，不会出现问题。启动时不需要实例恢复。</p><p>shutdown transactional：阻止任何用户建立新连接，等待所有当前连接用户的未递交的活动事务提交完毕，然后立即断开用户的连接。所有的用户都断开连接则立即关闭数据库，进行关闭数据库、卸载数据库、终止进程等操作。这种方式，用户有可能正在算账，做复杂报表！一次数据库操作做不完的，在刚做了一次数据库操作后，将被断开，这样对用户有一定影响，启动时不需要实例恢复。</p><p>shutdown immediate：阻止任何用户新的连接，同时限制当前连接用户开始新的事务。如果已连接用户有未完成的事务，则数据库系统不会等待他们完成，而是直接把当前未递交的事务回退。数据库系统不再等待用户主动断开连接，当未递交的事务回退成功后，系统会直接关闭、卸载数据库，并终止数据库进程，启动时不需要实例恢复。</p><p>shutdown abort：当数据库出现故障时，可能以上三种方式都无法正常关闭数据库，则使用这种方法。强制结束当前正在执行的SQL语句，任何未递交的事务都不被回退！这种方法基本上不会对控制文件或者参数文件造成破坏，这比强制关机要好一点（在无法正常关闭数据库的时候），启动时自动进行实例恢复。</p><h4 id="startup相关"><a href="#startup相关" class="headerlink" title="startup相关"></a>startup相关</h4><p>startup有7个参数：nomount、mount、open、pfile、force、restrict和</p><p>startup nomount：通过参数文件，分配sga，启动数据库后台进程，不打开控制文件和数据文件，不能访问数据库。</p><p>startup mount：仅给dba进行管理操作，不允许数据库用户访问。仅当前实例的控制文件被打开，数据文件未打开，在这个模式下可以进行如下操作：重命名数据文件、添加取消或重命名重做日志文件、设置归档模式、设置闪回、执行完整的数据库恢复操作等。</p><p>startup open：startup的默认参数就是open，打开数据库，允许数据库的访问，当前实例控制文件中所描述的所有文件都已经打开。</p><p>startup pfile=FILENAME：以FILENAME为初始化文件启动数据库，不是采用默认初始化文件。</p><p>startup force：中止当前数据库的运行，并开始重新正常的启动数据库。</p><p>startup restrict：只允许具有restricted session权限的用户访问数据库，该模式下登陆者可做如下操作：执行数据库数据的导出或导入、执行数据装载操作用SQL*Loader、暂时阻止一般的用户使用数据、在某个移植过程和升级操作过程中restricted session登陆后可使用ALTER SYSTEM 语句来禁止RESTRICTED SESSION特性ALTER SYSTEM DISABLE RESTRICTED SESSION；如果是在非受限模式下打开的数据库，后来发现需要限制访问，此时可以使用带ENABLE RESTRICTED SESSION 子句的ALTER SYSTEM 语句来完成。</p><h1 id="查看相关信息"><a href="#查看相关信息" class="headerlink" title="查看相关信息"></a>查看相关信息</h1><blockquote><p>下面介绍一下如何查看数据库相关的配置，状态等</p></blockquote><ul><li>看当前数据库的状态：select status from V$instance;</li><li>查看参数文件的位置：show parameter spfile;</li><li>查看控制文件的位置：show parameter control;</li><li>查看数据文件的位置：select file_name from dba_data_files;</li><li>启动数据库到nomount状态：SQL&gt;startup nomount;</li><li>启动数据库到mount状态：SQL&gt;startup mount;</li><li>启动数据库到opent状态：SQL&gt;startup;</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Oracle相关记录（by 陶世磊）2018-03-21 参考网络资源整理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="Oracle" scheme="blog.cuteximi.com/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>Dokcer值得你学习吗？</title>
    <link href="blog.cuteximi.com/whyDocker/"/>
    <id>blog.cuteximi.com/whyDocker/</id>
    <published>2018-03-28T09:40:27.000Z</published>
    <updated>2018-03-28T09:48:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5317394-bda53bb7ab1d52a1?imageMogr2/auto-orient/strip" alt="image"></p><p><strong>0</strong> 随着用户需求多样化，软件开发愈加复杂，所依赖的环境愈加的庞大，软件运行环境的迁移是一个<strong>巨大</strong>的工程。如果需要在别的机器上部署我的软件，就需要花大量的时间来迁移软件依赖的环境，更糟糕的是，全部迁移过去也不一定能运行，这就很尴尬是不是。</p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-e19c799dfd8433fd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>  <strong>1</strong>  为了解决这个痛点，虚拟化技术开始普及，比如：虚拟机或者KVM，但是仍然存在性能低，分发麻烦的痛点，注意，这是云时代，这样的解决方案在云时代好像不太适用了。</p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-d6fad615120ff782?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><strong>2</strong> 第一代运维以及第二代运维都没有离开SSH，运维过程十分消耗时间。现在随着容器技术的发展，以Docker为代表的技术开始发力，通过容器技术不需要通过ssh+秘钥这种低效的方式来连接服务器，速度得到了极大的提升。</p><p><strong>3</strong> Docker放在什么地方威力最大呢？当然是云平台！之前云平台发展缓慢的一个原因就是平台规范标准不一样，各个平台之间无法做到相互兼容，相互对接。每个云平台都有自己独立的资源管理策略，网络映射策略和内部依赖关系。所以一款产品从一个公有云平台“迁移”到另一个公有云平台几乎是不可能的。但是Docker的出现就打破了这种局面。Docker弥补了各个平台之间的差异，Docker屏蔽掉硬件层的差异，提供了统一的用户应用层。</p><p><strong>4</strong> 谁在用啊？</p><ul><li><p><strong>京东：</strong>Docker扛大旗，弹性伸缩成重点。</p></li><li><p><strong>微博红包：</strong>大规模Docker集群实践经验。</p></li><li><p><strong>腾讯：</strong>万台规模的Docker应用实践。</p></li><li><p><strong>阿里：</strong>全架构PaaS TAE 2.0的Docker实践。</p></li></ul><p><strong>5</strong> 如何学习？<br><strong>关注IT充电空间</strong></p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-22e27b7bc38d750c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><pre><code>温馨提示：如果觉得对你有帮助，点赞、转发一下，谢谢各位支持.</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/5317394-b168f3812f947018?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关注这个号的你，可以说很优秀了"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5317394-bda53bb7ab1d52a1?imageMogr2/auto-orient/strip&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;stron
      
    
    </summary>
    
    
      <category term="dokcer" scheme="blog.cuteximi.com/tags/dokcer/"/>
    
  </entry>
  
  <entry>
    <title>使用AWS服务器优雅的搭建梯子</title>
    <link href="blog.cuteximi.com/aws-vpn/"/>
    <id>blog.cuteximi.com/aws-vpn/</id>
    <published>2018-01-31T03:15:47.000Z</published>
    <updated>2018-10-11T05:40:58.946Z</updated>
    
    <content type="html"><![CDATA[<p>轻松搭建私服，如何优雅的使用Google…</p><p>更新于2018-10-11，勘误！</p><h1 id="扯一扯"><a href="#扯一扯" class="headerlink" title="扯一扯"></a>扯一扯</h1><ul><li>简单：非技术人员也能很快搭建。</li><li>快速：花费10分钟你就能创建自己的VPN服务。</li><li>私有：提供仅供你使用的VPN。</li><li>安全：连接加密且连接VPN服务器时不保留日志信息。</li><li>可控：根据需求随时开始或者中断VPN服务。</li><li>全球性：可以在9个世界范围内的区域创建一个或者多个的VPN服务。</li><li>设备支持：支持PPTP、L2TP(IPSEC)，意味着你可以在Android、iPhone、iPad、MAC等设备上使用VPN服务。</li></ul><h1 id="必备条件"><a href="#必备条件" class="headerlink" title="必备条件"></a>必备条件</h1><ul><li>信用卡</li><li>邮箱</li><li>手机号</li></ul><h1 id="注册AWS账号"><a href="#注册AWS账号" class="headerlink" title="注册AWS账号"></a>注册AWS账号</h1><p>为了减少本文长度，注册过程略过，我相信这部分对于大家都没有任何问题。</p><h1 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h1><h3 id="注册完成之后，进入控制面板中心，选择EC2"><a href="#注册完成之后，进入控制面板中心，选择EC2" class="headerlink" title="注册完成之后，进入控制面板中心，选择EC2"></a>注册完成之后，进入控制面板中心，选择EC2</h3><p><img src="http://upload-images.jianshu.io/upload_images/5317394-cc6c68fa7ae29b46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进入控制台"></p><h3 id="找到启动实例按钮。"><a href="#找到启动实例按钮。" class="headerlink" title="找到启动实例按钮。"></a>找到启动实例按钮。</h3><p><img src="http://upload-images.jianshu.io/upload_images/5317394-27255bb64f76de6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动实例"></p><h3 id="选择实例并配置"><a href="#选择实例并配置" class="headerlink" title="选择实例并配置"></a>选择实例并配置</h3><h5 id="我选择是：Ubuntu-Server-16-04-LTS-HVM-SSD-Volume-Type-ami-1ee65166"><a href="#我选择是：Ubuntu-Server-16-04-LTS-HVM-SSD-Volume-Type-ami-1ee65166" class="headerlink" title="我选择是：Ubuntu Server 16.04 LTS (HVM), SSD Volume Type - ami-1ee65166"></a>我选择是：Ubuntu Server 16.04 LTS (HVM), SSD Volume Type - ami-1ee65166</h5><p><img src="http://upload-images.jianshu.io/upload_images/5317394-f0d1b0e7a6f71a66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择镜像"></p><h5 id="直接点击审核和启动"><a href="#直接点击审核和启动" class="headerlink" title="直接点击审核和启动"></a>直接点击审核和启动</h5><p><img src="http://upload-images.jianshu.io/upload_images/5317394-510570fb912c1e55.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="审核和启动"></p><h5 id="点击启动"><a href="#点击启动" class="headerlink" title="点击启动"></a>点击启动</h5><p><img src="http://upload-images.jianshu.io/upload_images/5317394-04466bfc92ea8497.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动"></p><h5 id="在弹出的页面，选择创建密钥对"><a href="#在弹出的页面，选择创建密钥对" class="headerlink" title="在弹出的页面，选择创建密钥对"></a>在弹出的页面，选择创建密钥对</h5><p><img src="http://upload-images.jianshu.io/upload_images/5317394-5554527631dd917b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建密钥"></p><h5 id="填好名称之后，点击下载密钥对，下载完成之后，保存好记住位置，这样才能进行下一步"><a href="#填好名称之后，点击下载密钥对，下载完成之后，保存好记住位置，这样才能进行下一步" class="headerlink" title="填好名称之后，点击下载密钥对，下载完成之后，保存好记住位置，这样才能进行下一步"></a>填好名称之后，点击下载密钥对，下载完成之后，保存好记住位置，这样才能进行下一步</h5><p><img src="http://upload-images.jianshu.io/upload_images/5317394-761bb6b7ccc47e96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="保存密钥"></p><h5 id="这样，等待服务器实例创建完成就可以，喝杯茶"><a href="#这样，等待服务器实例创建完成就可以，喝杯茶" class="headerlink" title="这样，等待服务器实例创建完成就可以，喝杯茶"></a>这样，等待服务器实例创建完成就可以，喝杯茶</h5><p><img src="http://upload-images.jianshu.io/upload_images/5317394-f0430f8b08e2c164.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="等待"></p><h3 id="查看实例"><a href="#查看实例" class="headerlink" title="查看实例"></a>查看实例</h3><p>现在是启动成功之后的状态。接下来吗，我们要使用物理机去连接这个服务器，开始搭建shadowsocks<br><img src="http://upload-images.jianshu.io/upload_images/5317394-762a05cb8033ef66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="run"></p><h6 id="点击连接"><a href="#点击连接" class="headerlink" title="点击连接"></a>点击连接</h6><p><img src="http://upload-images.jianshu.io/upload_images/5317394-cb5c6d390282b58c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="连接"></p><h6 id="会弹出这个页面，只需要关注红线圈出的位置，点击复制这一部分。"><a href="#会弹出这个页面，只需要关注红线圈出的位置，点击复制这一部分。" class="headerlink" title="会弹出这个页面，只需要关注红线圈出的位置，点击复制这一部分。"></a>会弹出这个页面，只需要关注红线圈出的位置，点击复制这一部分。</h6><p><img src="http://upload-images.jianshu.io/upload_images/5317394-c39bb3f5f5554eab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看命令"></p><h6 id="在你刚刚下载的密钥对文件的所在目录下，打开命令行，把刚刚复制的命令粘进去"><a href="#在你刚刚下载的密钥对文件的所在目录下，打开命令行，把刚刚复制的命令粘进去" class="headerlink" title="在你刚刚下载的密钥对文件的所在目录下，打开命令行，把刚刚复制的命令粘进去"></a>在你刚刚下载的密钥对文件的所在目录下，打开命令行，把刚刚复制的命令粘进去</h6><p><img src="http://upload-images.jianshu.io/upload_images/5317394-b77908848c82186e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制"></p><h6 id="命令如下"><a href="#命令如下" class="headerlink" title="命令如下"></a>命令如下</h6><p><img src="http://upload-images.jianshu.io/upload_images/5317394-85f504183cf257f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命令"></p><h6 id="输入yes"><a href="#输入yes" class="headerlink" title="输入yes"></a>输入yes</h6><p><img src="http://upload-images.jianshu.io/upload_images/5317394-de4bd2a93220507c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="yes"></p><h6 id="连接成功！"><a href="#连接成功！" class="headerlink" title="连接成功！"></a>连接成功！</h6><p><img src="http://upload-images.jianshu.io/upload_images/5317394-7092d2314a9c6de2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="连接成功"></p><h1 id="搭建shadowsocks服务"><a href="#搭建shadowsocks服务" class="headerlink" title="搭建shadowsocks服务"></a>搭建shadowsocks服务</h1><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt-get update //更新apt-get$ sudo apt-get install python-pip //安装pip工具，用于安装shadowsocks$ sudo pip install --upgrade pip //更新pip$ sudo pip install shadowsocks //安装shadowsocks$ sudo vim ~/shadowsocks_conf.json //编辑shadowsocks配置，见下面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shadowsocks-conf-json的内容："><a href="#shadowsocks-conf-json的内容：" class="headerlink" title="shadowsocks_conf.json的内容："></a>shadowsocks_conf.json的内容：</h3><pre><code>    {    &quot;server&quot;:&quot;0.0.0.0&quot;,    &quot;port_password&quot;: {        &quot;8388&quot;: &quot;密码&quot;    },    &quot;local_address&quot;: &quot;127.0.0.1&quot;,    &quot;local_port&quot;:1080,    &quot;timeout&quot;:600,    &quot;method&quot;:&quot;aes-256-cfb&quot;,    &quot;auth&quot;: true    }</code></pre><h3 id="启动shadosocks服务"><a href="#启动shadosocks服务" class="headerlink" title="启动shadosocks服务"></a>启动shadosocks服务</h3><pre class="line-numbers language-shell"><code class="language-shell">$ sudo ssserver -c ~/shadowsocks_conf.json -d start //启动shadowsocks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动成功如图："><a href="#启动成功如图：" class="headerlink" title="启动成功如图："></a>启动成功如图：</h3><p><img src="http://upload-images.jianshu.io/upload_images/5317394-45dc5c76ba86e84b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="服务启动成功"></p><h3 id="编辑EC2入站规则"><a href="#编辑EC2入站规则" class="headerlink" title="编辑EC2入站规则"></a>编辑EC2入站规则</h3><p><img src="http://upload-images.jianshu.io/upload_images/5317394-5d94888dfa4b0773.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安全组"><br><img src="http://upload-images.jianshu.io/upload_images/5317394-dc0c0816a027f612.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编辑"></p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-8d21e5f8ec7283ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="保存"></p><p>至此，VPN服务器就搭建完毕了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>服务搭建好了，使用客户端去连接就好了。</p><ul><li>手机端推荐影梭app</li><li>电脑推荐 <a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows</a></li><li>安卓：<a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-android/releases</a></li></ul><p>如果搭建过程中出现任何不懂得地方，可以联系我。</p><ul><li>关注微信公众号：码省理工  | 头条号：陶哥的干货圈</li><li>邮箱：<a href="mailto:aikuyun.tsl@gmail.com" target="_blank" rel="noopener">aikuyun.tsl@gmail.com</a></li><li>QQ:1534761445</li></ul><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><ul><li><a href="http://cuteximi.com/%E8%BF%99%E6%A0%B7%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8google/" target="_blank" rel="noopener">也可以这也样使用Google搜索</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;轻松搭建私服，如何优雅的使用Google…&lt;/p&gt;
&lt;p&gt;更新于2018-10-11，勘误！&lt;/p&gt;
&lt;h1 id=&quot;扯一扯&quot;&gt;&lt;a href=&quot;#扯一扯&quot; class=&quot;headerlink&quot; title=&quot;扯一扯&quot;&gt;&lt;/a&gt;扯一扯&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;简单：非技术
      
    
    </summary>
    
      <category term="随笔" scheme="blog.cuteximi.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="AWS" scheme="blog.cuteximi.com/tags/AWS/"/>
    
      <category term="VPN" scheme="blog.cuteximi.com/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>这样也可以使用google</title>
    <link href="blog.cuteximi.com/%E8%BF%99%E6%A0%B7%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8google/"/>
    <id>blog.cuteximi.com/这样也可以使用google/</id>
    <published>2017-11-10T10:10:24.000Z</published>
    <updated>2017-11-10T10:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="这几个网站，无需科学上网，就可以使用Google搜索的服务"><a href="#这几个网站，无需科学上网，就可以使用Google搜索的服务" class="headerlink" title="这几个网站，无需科学上网，就可以使用Google搜索的服务"></a>这几个网站，无需科学上网，就可以使用Google搜索的服务</h1><p><img src="http://upload-images.jianshu.io/upload_images/5317394-5beb803eb382559b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>没办法使用google的同学们请注意啦，你还在使用百度搜索吗？给你们推荐几款google的替代品，搜索结果来自Google,无需科学上网。</p></blockquote><h1 id="uol-busca"><a href="#uol-busca" class="headerlink" title="uol busca"></a>uol busca</h1><p><a href="https://busca.uol.com.br/" target="_blank" rel="noopener">https://busca.uol.com.br/</a><br><img src="http://upload-images.jianshu.io/upload_images/5317394-d8f36084886a5a84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="Rambler-ru"><a href="#Rambler-ru" class="headerlink" title="Rambler.ru"></a>Rambler.ru</h1><p>是俄罗斯的门户网站 ，谷歌提供技术支持，比百度良心9999999倍！<br><img src="http://upload-images.jianshu.io/upload_images/5317394-3cb2dc8bcee679c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="Mezw"><a href="#Mezw" class="headerlink" title="Mezw"></a>Mezw</h1><p>经过简单的关键词搜索，国内正常访问，界面简洁。</p><p><a href="https://so.mezw.com" target="_blank" rel="noopener">https://so.mezw.com</a></p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-3ebff131c8dbfa41?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><h1 id="Bird-so"><a href="#Bird-so" class="headerlink" title="Bird.so"></a>Bird.so</h1><p><a href="http://bird.so/" target="_blank" rel="noopener">http://bird.so/</a></p><p>关于技术问题是。来自google,雅虎，必应搜索的聚合，经测试，优先展示google搜索的内容。</p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-4eeb3b1adbc9cf00?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;这几个网站，无需科学上网，就可以使用Google搜索的服务&quot;&gt;&lt;a href=&quot;#这几个网站，无需科学上网，就可以使用Google搜索的服务&quot; class=&quot;headerlink&quot; title=&quot;这几个网站，无需科学上网，就可以使用Google搜索的服务&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="随笔" scheme="blog.cuteximi.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Google" scheme="blog.cuteximi.com/tags/Google/"/>
    
  </entry>
  
  <entry>
    <title>Shiro概念篇</title>
    <link href="blog.cuteximi.com/Shiro%E6%A6%82%E5%BF%B5%E7%AF%87/"/>
    <id>blog.cuteximi.com/Shiro概念篇/</id>
    <published>2017-09-19T01:05:46.000Z</published>
    <updated>2017-09-19T01:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/5317394-bf408e8a8461e4c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="看博主系列"><a href="#看博主系列" class="headerlink" title="看博主系列"></a>看博主系列</h1><ul><li><a href="http://jinnianshilongnian.iteye.com/blog/2018936" target="_blank" rel="noopener">开涛的博客</a><h2 id="以下是学习笔记："><a href="#以下是学习笔记：" class="headerlink" title="以下是学习笔记："></a>以下是学习笔记：</h2></li></ul><p><img src="http://upload-images.jianshu.io/upload_images/5317394-9d91f7f1df09fdf1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>Authentication:身份认证，验证用户是不是已经拥有相应的身份；<br>Authorization:授权，即权限验证，验证某个已认证的用户是否拥有某个权限：也就是判断用户能不能做这个事情；<br>Session Manager：会话管理，即用户登录一次就是一次会话，在没有退出之前，他所有会话的信息都保存会话中；<br>Cryptography:加密，保护数据的安全性；<br>Web Support：Web支持，可以很容易集成到web环境；<br>Concurrency；shiro支持多线程应用的并发验证，即在一个线程中开启另一个线程，能把去权限自动传播过去；<br>Testing: 提供测试支持；<br>Run As: 允许一个用户假装另一个用户的身份访问；<br>Remember Me: 记住我，即一次登录之后，下次登陆再来的话不用在登陆；</p><blockquote><p>shiro不会去维护用户，维护权限；这些需要我们自己去设计/提供；然后通过相应的接口注入给shiro</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5317394-beaab3355b09bc18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>直接与代码交互的对象是Subject，也就是说Shiro对外API的核心是Subject<br>Subject: 主体，代表当前“用户”，所有的Subject都绑定到SecurityManager，都委托给SecurityManager, SUbject相当于门面，而SecurityManager才是实际的执行者；<br>SecurityManager：我是安全管理器，所有有安全相关的操作，都会交给我来处理，我管理着所有的Subject，我是核心，我负责与其他组件进行交互，你也可以你把我比作springmvc里面的前端控制器，<br>Realm: 我叫域，Shiro要从我这里获取安全数据（用户，角色，权限），也就是说SecurityManager要验证身份，需要从我这里获取相应用户的身份，也需要从我这里获取权限，可以把我 看作安全数据源；</p><blockquote><p>从上面也可以看出，Shiro不提供维护用户和权限，而是用过Realm让开发人员自己注入；</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/5317394-cf95d95948094376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>Subject: 主体<br>SecurityManager:心脏<br>Authentication:认证器<br>Authorizer: 授权器<br>Realm:可以有一个或者多个，安全的实体数据源<br>SessionManager:  Shiro并不仅仅可以用在Web环境，也可以用在如普通的JavaSE环境、EJB等环境<br>SessionDao:<br>CacheManager:缓存控制器 ，放到 缓存中可以提高访问性能；<br>Cryptography: 密码模块；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5317394-bf408e8a8461e4c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="框架" scheme="blog.cuteximi.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Shiro" scheme="blog.cuteximi.com/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>Spring中的单例和多例</title>
    <link href="blog.cuteximi.com/Spring%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E5%92%8C%E5%A4%9A%E4%BE%8B/"/>
    <id>blog.cuteximi.com/Spring中的单例和多例/</id>
    <published>2017-09-19T01:04:22.000Z</published>
    <updated>2017-09-19T01:04:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>直接上配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans             http://www.springframework.org/schema/beans/spring-beans-2.5.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.HelloWorld<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-</span>  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：<br>init-method，该方法是由spring容器去执行法人，在构造函数之后执行；<br>destroy-method，如果是单例模式，则spring容器关闭或者销毁的时候，会执行该方法；如果是多例模式，则spring容器不负责销毁；</p><p>说明：<br>①：如果想让spring容器管理bean的生命周期，那么该bean必须为单例。<br>②：当一个bean在多例模式下，lazy-init为false或者default失效.<br>③：单例模式下，lazy-init可以避免预处理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接上配置：&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token prolog&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;
      
    
    </summary>
    
      <category term="框架" scheme="blog.cuteximi.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="blog.cuteximi.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC接受参数</title>
    <link href="blog.cuteximi.com/SpringMVC%E6%8E%A5%E5%8F%97%E5%8F%82%E6%95%B0/"/>
    <id>blog.cuteximi.com/SpringMVC接受参数/</id>
    <published>2017-09-19T00:59:01.000Z</published>
    <updated>2017-09-19T01:02:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.@PathVariable和@RequestParam的区别<br>请求路径上有个id的变量值，可以通过@PathVariable来获取 @RequestMapping(value = “/page/{id}”, method = RequestMethod.GET)<br>2.@RequestParam用来获得静态的URL请求入参 spring注解时action里用到。<br>简介：<br>handler method 参数绑定常用的注解,我们根据他们处理的Request的不同内容部分分为四类：（主要讲解常用类型）<br>A、处理<strong>requet uri </strong>部分这里指uri template中variable，不含queryString部分）的注解： @PathVariable;</p><p>B，处理<strong>request header</strong>部分的注解： @RequestHeader, @CookieValue;<br>图示：</p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-b073be4336c868e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>C、处理<strong>request body</strong>部分的注解：@RequestParam, @RequestBody;</p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-bac13d957150f242.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-4f184691e74532be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>D、处理<strong>attribute</strong>类型是注解： @SessionAttributes, @ModelAttribute;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.@PathVariable和@RequestParam的区别&lt;br&gt;请求路径上有个id的变量值，可以通过@PathVariable来获取 @RequestMapping(value = “/page/{id}”, method = RequestMethod.GET)&lt;
      
    
    </summary>
    
      <category term="框架" scheme="blog.cuteximi.com/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="blog.cuteximi.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>数组扩容问题</title>
    <link href="blog.cuteximi.com/%E6%95%B0%E7%BB%84%E6%89%A9%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
    <id>blog.cuteximi.com/数组扩容问题/</id>
    <published>2017-09-19T00:52:45.000Z</published>
    <updated>2017-09-19T00:53:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用数组模拟栈"><a href="#用数组模拟栈" class="headerlink" title="用数组模拟栈"></a>用数组模拟栈</h1><blockquote><p>数组是固定大小的，不能改变长度，要想达到数组扩容的目的，就只能把当前数组复制到一个更长长度的数组中；</p></blockquote><p>使用Arrays.copyOf()方法<br>源码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">short</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">copyOf</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">[</span><span class="token punctuation">]</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span> newLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">short</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">short</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> copy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                         Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> copy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，内部调用了System.arraycopy()方法。</p><p>下面是用数组实现一个栈的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** initialize your data structure here. */</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组</span>    <span class="token keyword">int</span> defaultSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认大小</span>    <span class="token keyword">int</span> realNumber<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存在的数量</span>    <span class="token keyword">public</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>defaultSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>realNumber <span class="token operator">==</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            stack <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span>stack<span class="token punctuation">.</span>length<span class="token operator">+</span>defaultSize<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          stack<span class="token punctuation">[</span>realNumber<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>realNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           realNumber<span class="token operator">--</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span>realNumber<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> realNumber<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">></span> stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                min <span class="token operator">=</span> stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> min<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用数组模拟栈&quot;&gt;&lt;a href=&quot;#用数组模拟栈&quot; class=&quot;headerlink&quot; title=&quot;用数组模拟栈&quot;&gt;&lt;/a&gt;用数组模拟栈&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;数组是固定大小的，不能改变长度，要想达到数组扩容的目的，就只能把当前数组复制到一个
      
    
    </summary>
    
      <category term="编程" scheme="blog.cuteximi.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="array" scheme="blog.cuteximi.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="blog.cuteximi.com/%E5%85%B3%E4%BA%8E%E6%88%91/"/>
    <id>blog.cuteximi.com/关于我/</id>
    <published>2017-09-12T05:05:42.000Z</published>
    <updated>2018-09-19T06:28:49.576Z</updated>
    
    <content type="html"><![CDATA[<p>你知道吗？</p><p>我要成为….更牛*的人！<br><img src="http://upload-images.jianshu.io/upload_images/5317394-0afeceff7ba3b2ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>这是我设计的logo，简单，扁平化的设计带给人大方的气质，色彩仿照google的色彩搭配。</p><p>本人，男，地地道道山东人，就读于青岛科技大学，双非学校，软件工程专业，不过没关系，对未来，我还是充满斗志的！向往北上广的生活，压力就是我的动力。<br>喜欢写东西，不过文采不好，但也不影响我写作的热情，写作作为生活的一部分，带给我分享的乐趣，慢慢的提升自己。希望自己的未来，也像那个logo一样，散发自己独特的精彩！<br>贴一下自己的简历——————嘻嘻—————</p><h1 id="陶世磊-认真搞定一切"><a href="#陶世磊-认真搞定一切" class="headerlink" title="陶世磊 认真搞定一切"></a>陶世磊 认真搞定一切</h1><p>22岁 邮箱：<a href="mailto:aikuyun.tsl@gmail.com" target="_blank" rel="noopener">aikuyun.tsl@gmail.com</a> 个人博客<a href="http://www.cuteximi.com" target="_blank" rel="noopener">www.cuteximi.com</a><br>手机号：139-<em>**</em>-0727  QQ:1534761445</p><h2 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h2><p>2014.9-至今 青岛科技大学 软件工程（本科）</p><h2 id="个人技能"><a href="#个人技能" class="headerlink" title="个人技能"></a>个人技能</h2><p>能够使用C++,C语言编写程序。（更新于2018年1月）<br>熟悉运用java基础，数组，集合，多线程，IO,网络编程（TCP）<br>熟悉使用javaWeb的开发,熟悉使用JSP, servlet, Ajax<br>熟悉使用Spring, SpringMVC, Mybatis整合开发,能实际开发J2EE项目<br>熟悉使用javascript,HTML,CSS .了解 Layui, Vue, Bootstrap, Node<br>熟悉使用数据库mysql,了解Mariadb, Redis, MongoDB<br>熟悉使用Tomcat，了解Ngnix<br>熟悉使用maven, git.能够协作开发，熟悉使用github<br>了解Shiro，SpringBoot,熟悉Struts2, Hibernate，了解Docker, Linux</p><h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><h3 id="2016-7-2016-9-烟草配方管理系统-C-系统维护"><a href="#2016-7-2016-9-烟草配方管理系统-C-系统维护" class="headerlink" title="2016.7-2016.9 烟草配方管理系统 C#系统维护"></a>2016.7-2016.9 烟草配方管理系统 C#系统维护</h3><p>项目职责：独立完成升级录入信息模块。<br>开发环境：vs2005,SQL server2005，mvc设计模式；<br>开发模块： 录入信息模块：将第一版程序录入模块升级改造，升级为烟草配方文件一键导入到系统中；<br>技术要点：<br>1.采用C#控件读取电子表格的每一行数据，加入到数据库中；<br>2.引用的com组件：Microsoft.Office.Interop.Excel.dll 读取EXCEL文件</p><h3 id="2017-2-2017-3-西米商城-java后台开发"><a href="#2017-2-2017-3-西米商城-java后台开发" class="headerlink" title="2017.2-2017.3 西米商城 java后台开发"></a>2017.2-2017.3 西米商城 java后台开发</h3><p>项目职责：编写用户模块<br>开发环境：IDEA, JDK1.8, Tomcat8.0, Mysql5.7，Spring4.3.8,<br>开发模块： 用户模块（登录，注册，修改个人信息，忘记密码）<br>技术要点：<br>1.session管理用户的状态<br>2.MD5加盐加密<br>3.登录验证码：使用kaptcha与spring整合，基于xml配置文件<br>4.横向，纵向越权的安全漏洞<br>5.高复用的服务响应对象的设计以及抽象封装<br>6.Mybatis-plugins插件，方便开发</p><h3 id="2016-12-2016-12-问答社区-java开发"><a href="#2016-12-2016-12-问答社区-java开发" class="headerlink" title="2016.12-2016.12 问答社区 java开发"></a>2016.12-2016.12 问答社区 java开发</h3><p>项目职责：①后台框架搭建 ④接口的设计和编写<br>开发环境：IDEA, JDK1.8, Tomcat8.0, Mysql5.7， Velocity , Git 2.9, SpringBoot Mybatis<br>开发模块： 问题发布模块， 用户个人中心，评论模块<br>技术要点：<br>1.采用 springboot +mybatis搭建基础项目<br>2 MD5密码加密（加盐处理）<br>3.数据库mysql<br>4.采用git进行项目版本控制<br>5.使用velocity进行页面渲染<br>6.拦截器，拦截token<br>7.实现过滤算法，过滤垃圾关键词，色情词汇</p><h3 id="2017-5-2017-7-观鸟比赛系统-Java后台开发"><a href="#2017-5-2017-7-观鸟比赛系统-Java后台开发" class="headerlink" title="2017.5-2017.7  观鸟比赛系统 Java后台开发"></a>2017.5-2017.7  观鸟比赛系统 Java后台开发</h3><p>项目职责：①编写需求分析 ②参与数据库设计 ③后台框架搭建 ④接口的设计和编写<br>开发环境：IDEA, JDK1.8, Tomcat8.0, Mysql5.7，Redis3.2, Bootstarp3.0, Git 2.9, Spring4.3.8, Centos7.4,<br>Jquery1.9 Docker 17.0.6<br>开发模块： 管理员模块， 用户模块，裁判模块, 鸟种记录模块, 权限管理，比赛队伍模块<br>技术要点：<br>1.采用 spring, spring MVC,mybatis搭建基础项目（用到spring IOC AOP管理事务，mvc三层）<br>2.日志采用log4j （基于配置xml的配置）<br>3.MD5密码加密（加盐处理）<br>4.使用mybatis处理灵活查询和关系映射，使用mapper代理的方式<br>5.数据库mysql,redis缓存(strings，hashes，lists，sets，sorted sets ）<br>6.采用git进行项目版本控制<br>7.部署环境linux（Centos7.4）<br>8.使用bootstrap进行页面渲染（栅格系统+拿来即用的样式+自定义根据需求加载样式）<br>9.ajax异步请求，刷新，基于jQuery实现<br>10.前后台使用Json传输数据格式(其中使用自定义泛型类封装返回的status,msg,data属性)<br>11.使用了基于restful风格的url<br>12.后台管理使用jsp接受控制层返回的ModelAndView, 前台比赛系统接受json数据<br>13.后台部分使用shiro进行权限管理<br>14.dokcer进行服务器环境的搭建docker pull，制作镜像vim Dockerfile–&gt;docker build，开启镜像 docker<br>run -d -p:端口号<br>15.junit单元测试(使用注解<br>@RunWith(SpringJUnit4ClassRunner.class),@ContextConfigration(locals=”xml 位置”))，进行单元测试<br>16.使用postman调试接口</p><h3 id="2017-8-2017-9-青岛航空项目-java开发"><a href="#2017-8-2017-9-青岛航空项目-java开发" class="headerlink" title="2017.8-2017.9 青岛航空项目  java开发"></a>2017.8-2017.9 青岛航空项目  java开发</h3><p>项目职责：①编写需求分析 ②参与数据库设计 ③后台框架搭建 ④接口的设计和编写<br>开发环境：IDEA, JDK1.8, Tomcat8.0, Mysql5.7， Bootstarp3.0, Git 2.9, Spring4.3.8,,Jquery1.9<br>开发模块： 管理员模块， 用户模块，航班模块，订单模块<br>技术要点：<br>1.采用 spring, spring MVC,mybatis搭建基础项目<br>2.日志采用log4j （基于配置xml的配置）<br>3.MD5密码加密（加盐处理）<br>5.数据库mysql<br>6.采用git进行项目版本控制<br>7.使用layui进行页面渲染<br>9.ajax异步请求，刷新，基于jQuery实现<br>10.前后台使用Json传输数据格式<br>11.后台部分使用shiro进行权限管理<br>12.短信登录验证码<br>13.接入支付宝第三方支付<br>14.处理高并发订票</p><h2 id="最近在学习"><a href="#最近在学习" class="headerlink" title="最近在学习"></a>最近在学习</h2><ul><li>Linux系统</li><li>大数据基础</li></ul><h2 id="校园经历"><a href="#校园经历" class="headerlink" title="校园经历"></a>校园经历</h2><p>①获得院级奖学金 ②两次青岛啤酒节优秀志愿者 ③大学公益社团文艺部部长 ④大二到大三期间担任校园O2O平台<br>59store校园经理，带领团队营销创业。</p><h2 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h2><p>1.做事认真负责，处事灵活，不拘泥于现有的方案，有独立的研发能力；<br>2.做事专注，投入度比较高，不被外物干扰，热爱互联网行业；<br>3.很好的抗压能力，以及学习能力，阅读英文文档的能力；<br>4.喜欢写作，每天一篇技术或者生活分享，有个人博客，个人公众号;<br>5.每天坚持总结工作</p><hr><p>好了！建立博客的初衷就是提高自己的表达，释放自己的写作欲望，在文字的世界里表达自己的内心，这也是一个愉快的过程，每天都在坚持：<br>当然，下面是主要的写作战场：<br>最开始的战场是 <a href="http://www.cuteximi.com" target="_blank" rel="noopener">基于hexo搭建的博客-认真搞定一切</a><br>主要的战场是在这儿  <a href="http://www.jianshu.com/u/95431265a9b0" target="_blank" rel="noopener">简书个人博客</a><br>今年开始抵达到这儿  <a href="http://my.csdn.net/my/mycsdn?c=171bbeac09958df49cd0d75cfeac2809" target="_blank" rel="noopener">CSDN主页</a><br>个人微信公众号（尽量周更）：</p><p><img src="https://upload-images.jianshu.io/upload_images/5317394-8459959eaa590f27.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="微信公众号：码省理工"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;你知道吗？&lt;/p&gt;
&lt;p&gt;我要成为….更牛*的人！&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/5317394-0afeceff7ba3b2ff.png?imageMogr2/auto-orient/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Thread</title>
    <link href="blog.cuteximi.com/Thread/"/>
    <id>blog.cuteximi.com/Thread/</id>
    <published>2017-08-20T01:10:42.000Z</published>
    <updated>2017-09-12T05:04:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="理解程序、进程、线程的概念"><a href="#理解程序、进程、线程的概念" class="headerlink" title="理解程序、进程、线程的概念"></a>理解程序、进程、线程的概念</h2><p>程序可以理解为静态的代码<br>进程可以理解为执行中的程序。<br>线程可以理解为进程的进一步细分，程序的一条执行路径</p><h2 id="什么时候需要多线程？"><a href="#什么时候需要多线程？" class="headerlink" title="什么时候需要多线程？"></a>什么时候需要多线程？</h2><ul><li>程序需要执行两个或者多个任务</li><li>程序需要实现一些等待的任务时，如用户操作，文件读写操作，网络操作，搜索等。</li><li>需要一些后台运行的程序时。<h2 id="多线程的优势"><a href="#多线程的优势" class="headerlink" title="多线程的优势."></a>多线程的优势.</h2></li><li>减少程序的响应时间；</li><li>线程切换的花销小；</li><li>使用多线程可以简化程序的结构，使得程序便于理解和维护；<h2 id="如何创建线程（重点）"><a href="#如何创建线程（重点）" class="headerlink" title="如何创建线程（重点）"></a>如何创建线程（重点）</h2><h3 id="文字表述"><a href="#文字表述" class="headerlink" title="文字表述"></a>文字表述</h3><h4 id="创建线程的两种方法："><a href="#创建线程的两种方法：" class="headerlink" title="创建线程的两种方法："></a>创建线程的两种方法：</h4><h5 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h5>1) 定义子类继承Thread类。<br>2) 子类中重写Thread类中的run方法。<br>3) 创建Thread子类对象，即创建了线程对象。<br>4) 调用线程对象start方法：启动线程，调用run方法<h5 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h5>1）定义子类，实现Runnable接口。<br>2）子类中重写Runnable接口中的run方法。<br>3）通过Thread类含参构造器创建线程对象。<br>4）将Runnable接口的子类对象作为实际参数传递给Thread类的构造方法中。<br>5）调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。<h3 id="代码表示："><a href="#代码表示：" class="headerlink" title="代码表示："></a>代码表示：</h3></li></ul><h5 id="继承于Thread类"><a href="#继承于Thread类" class="headerlink" title="继承于Thread类"></a>继承于Thread类</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by 陶世磊 on 2017/8/20. * * @Description: */</span><span class="token keyword">class</span> <span class="token class-name">PrintNum</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//子线程执行的代码</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">PrintNum</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PrintNum p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintNum</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrintNum p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintNum</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MAX_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10</span>        p2<span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>MIN_PRIORITY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span>        p1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：实现Runnable接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by 陶世磊 on 2017/8/20. * * @Description: */</span><span class="token keyword">class</span> <span class="token class-name">SubThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//子线程执行的代码</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        SubThread s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种方式的对比：联系：class Thread implements Runnable<br>比较哪个好？实现的方式较好。<br>①解决了单继承的局限性。②如果多个线程有共享数据的话，建议使用实现方式，同时，共享数据所在的类可以作为Runnable接口的实现类。</p><h2 id="线程里的常用方法："><a href="#线程里的常用方法：" class="headerlink" title="线程里的常用方法："></a>线程里的常用方法：</h2><p>start() run() currentThread() getName()<br>setName(String name) yield() join() sleep() isAlive()<br>getPriority() setPriority(int i)； wait() notify() notifyAll()</p><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>new runnable running block dead<br>可以通过getState()方法来获取线程当前的状态</p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-b6e5fe6b76bbca10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="clipboard.png"></p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-f10b024dd94cbac2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="clipboa1rd.png"></p><h3 id="新生状态"><a href="#新生状态" class="headerlink" title="新生状态"></a>新生状态</h3><p>在程序中用构造方法（new操作符）创建一个新线程时，如new Thread(r)，该线程就是创建状态，此时它已经有了相应的内存空间和其它资源，但是还没有开始执行。</p><h3 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h3><p> 新建线程对象后，调用该线程的 start()方法就可以启动线程。当线程启动时，线程进入就绪状态（runnable）。由于还没有分配CPU，线程将进入线程队列排队，等待 CPU 服务，这表明它已经具备了运行条件。当系统挑选一个等待执行的Thread对象后，它就会从等待执行状态进入执行状态。系统挑选的动作称之为“CPU调度”。一旦获得CPU线程就进入运行状态并自动调用自己的run方法。</p><h3 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h3><p>当就绪状态的线程被调用并获得处理器资源时，线程就进入了运行状态。此时，自动调用该线程对象的 run()方法。 run()方法定义了该线程的操作和功能。运行状态中的线程执行自己的run方法中代码。直到调用其他方法或者发生阻塞而终止。</p><h3 id="阻塞状态"><a href="#阻塞状态" class="headerlink" title="阻塞状态"></a>阻塞状态</h3><p> 一个正在执行的线程在某些特殊情况下，如被人为挂起或需要执行耗时的输入输出操作时，将让出 CPU 并暂时中止自己的执行，进入堵塞状态。在可执行状态下，如果调用 sleep()、 suspend()、 wait()等方法，线程都将进入堵塞状态。堵塞时，线程不能进入排队队列，只有当引起堵塞的原因被消除后，线程转入就绪状态。重新到就绪队列中排队等待，这时被CPU调度选中后会从原来停止的位置开始继续执行。<br>      记住：阻塞被消除后是回到就绪状态，不是运行状态。</p><h3 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h3><p>线程调用 stop()方法、destory()方法或 run()方法执行结束后，线程即处于死亡状态。处于死亡状态的线程不具有继续运行的能力。不推荐使用stop()方法【会产生异常】  destory()方法【destory是强制终止，不会释放锁】</p><h2 id="同步和异步的区别"><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h2><h2 id="线程的同步机制（重点）"><a href="#线程的同步机制（重点）" class="headerlink" title="线程的同步机制（重点）"></a>线程的同步机制（重点）</h2><p>前提：如果我们创建的多个线程，存在着共享数据，那么就有可能出现线程的安全问题：当其中一个线程操作共享数据时，还未操作完成另外的线程就参与进来，导致对共享数据的操作出现问题。<br>解决方式：要求一个线程操作共享数据时，只有当其完成操作完成共享数据，其它线程才有机会执行共享数据。</p><h4 id="方式一：同步代码块："><a href="#方式一：同步代码块：" class="headerlink" title="方式一：同步代码块："></a>方式一：同步代码块：</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//操作共享数据的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注：<br>1.同步监视器：俗称锁，任何一个类的对象都可以才充当锁。要想保证线程的安全，必须要求所有的线程共用同一把锁！<br>2.使用实现Runnable接口的方式创建多线程的话，同步代码块中的锁，可以考虑是this。如果使用继承Thread类的方式，慎用this!<br>3.共享数据：多个线程需要共同操作的变量，需要明确哪部分是操作共享数据的代码。</p><h4 id="方式二：同步方法：将操作共享数据的方法声明为synchronized。"><a href="#方式二：同步方法：将操作共享数据的方法声明为synchronized。" class="headerlink" title="方式二：同步方法：将操作共享数据的方法声明为synchronized。"></a>方式二：同步方法：将操作共享数据的方法声明为synchronized。</h4><p>比如：public synchronized void show(){ //操作共享数据的代码}</p><p>注：1.对于非静态的方法而言，使用同步的话，默认锁为：this。如果使用在继承的方式实现多线程的话，慎用！<br>2.对于静态的方法，如果使用同步，默认的锁为：当前类本身。以单例的懒汉式为例。 Class clazz = Singleton.class<br>总结：释放锁:wait();<br>不释放锁： sleep() yield() suspend() (过时，可能导致死锁)<br>死锁：不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁<br>死锁是我们在使用同步时，需要避免的问题！</p><h2 id="线程的通信："><a href="#线程的通信：" class="headerlink" title="线程的通信："></a>线程的通信：</h2><p>如下的三个方法必须使用在同步代码块或同步方法中！<br>wait():当在同步中，执行到此方法，则此线程“等待”，直至其他线程执行notify()的方法，将其唤醒，唤醒后继续其wait()后的代码<br>notify()/notifyAll():在同步中，执行到此方法，则唤醒其他的某一个或所有的被wait的线程。</p><blockquote><p>例题：<br>1.两个线程交替打印1-100自然数<br>2.生产者、消费者的例子</p></blockquote><p>代码实现如下：<br>生产者消费者的例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cuteximi<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * 生产者/消费者问题 * 生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品， * 店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下， * 如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下， * 如果店中有产品了再通知消费者来取走产品。    分析：    1.是否涉及到多线程的问题？是！生产者、消费者    2.是否涉及到共享数据？有！考虑线程的安全    3.此共享数据是谁？即为产品的数量    4.是否涉及到线程的通信呢？存在这生产者与消费者的通信 */</span><span class="token keyword">class</span> <span class="token class-name">Clerk</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> product<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//生产产品</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">>=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            product<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":生产了第"</span> <span class="token operator">+</span> product <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//消费产品</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":消费了第"</span> <span class="token operator">+</span> product <span class="token operator">+</span> <span class="token string">"个产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            product<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//生产者</span>    Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者开始生产产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clerk<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//消费者</span>    Clerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>Clerk clerk<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者消费产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clerk<span class="token punctuation">.</span><span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Clerk clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Producer p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Consumer c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个生产者的线程</span>        Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一个消费者的线程</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"消费者1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"生产者2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>交替打印的例子：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>cuteximi<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//线程通信。如下的三个关键字使用的话，都得在同步代码块或同步方法中。</span><span class="token comment" spellcheck="true">//wait():一旦一个线程执行到wait()，就释放当前的锁。</span><span class="token comment" spellcheck="true">//notify()/notifyAll():唤醒wait的一个或所有的线程</span><span class="token comment" spellcheck="true">//使用两个线程打印 1-100. 线程1, 线程2 交替打印</span><span class="token keyword">class</span> <span class="token class-name">PrintNum</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                obj<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//延迟</span>                        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span>                            <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    num<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    obj<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestThread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PrintNum p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"甲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"乙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="start-run"><a href="#start-run" class="headerlink" title="start() run()"></a>start() run()</h2><p>如果线程直接调用run()方法，这会被当成一个普通的函数来使用，这时，只有一个主线程，<br>然而start()可以异步的调用run()方法，来实现多线程。</p><blockquote><p>基础很重要！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h1&gt;&lt;h2 id=&quot;理解程序、进程、线程的概念&quot;&gt;&lt;a href=&quot;#理解程序、进程、线程的概念&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="编程" scheme="blog.cuteximi.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="blog.cuteximi.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>float</title>
    <link href="blog.cuteximi.com/float/"/>
    <id>blog.cuteximi.com/float/</id>
    <published>2017-08-20T00:17:24.000Z</published>
    <updated>2017-09-19T00:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>float是单精度类型,精度是<strong>8</strong>位有效数字，取值范围是10的-38次方到10的38次方，float占用<strong>4</strong>个字节的存储空间<br>double是双精度类型，精度是<strong>17</strong>位有效数字，取值范围是10的-308次方到10的308次方，double占用<strong>8</strong>个字节的存储空间</p><h1 id="说明一点"><a href="#说明一点" class="headerlink" title="说明一点"></a>说明一点</h1><p><strong>当你不声明的时候，默认小数都用double来表示，所以如果要用float的话，则应该在其后加上f</strong><br>例如：float a=1.3;如图：（如果我不加，编译的时候就会报错！）<br><img src="http://upload-images.jianshu.io/upload_images/5317394-3f3819eb01077aad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="float.png"><br>则会提示不能将double转化成float  这成为窄型转化<br>如果要用float来修饰的话，则应该使用float a=1.3f</p><h1 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h1><p>注意float是8位有效数字，第7位数字将会产生四舍五入<br>所以如果一个float变量 这样定义:  float a=1.23456785;   则第7位将产生四舍五入(5以下的都将舍去)</p><p><img src="http://upload-images.jianshu.io/upload_images/5317394-23d5ff04d983d370.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h1&gt;&lt;p&gt;float是单精度类型,精度是&lt;strong&gt;8&lt;/strong&gt;位有效数字，取值范围是10的-38次方到10的38次方，float占用&lt;s
      
    
    </summary>
    
      <category term="编程" scheme="blog.cuteximi.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="float" scheme="blog.cuteximi.com/tags/float/"/>
    
  </entry>
  
</feed>
